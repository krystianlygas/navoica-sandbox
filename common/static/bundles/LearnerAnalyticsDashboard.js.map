{"version":3,"sources":["webpack:///./lms/static/js/learner_analytics_dashboard/CircleChart.jsx","webpack:///./lms/static/js/learner_analytics_dashboard/CircleChartLegend.jsx","webpack:///./lms/static/js/learner_analytics_dashboard/Discussions.jsx","webpack:///./lms/static/js/learner_analytics_dashboard/DueDates.jsx","webpack:///./lms/static/js/learner_analytics_dashboard/GradeTable.jsx","webpack:///./lms/static/js/learner_analytics_dashboard/LearnerAnalyticsDashboard.jsx"],"names":["size","radCircumference","Math","PI","center","radius","CircleChart","props","getCenter","bind","getSlices","centerHole","sliceBorder","strokeColor","slices","total","reduce","totalValue","value","strokeWidth","radSegment","lastX","lastY","slice","reverse","map","index","sliceIndex","valuePercentage","longArc","nextX","cos","nextY","sin","d","join","React","Component","defaultProps","propTypes","PropTypes","array","isRequired","bool","object","CircleChartLegend","data","label","swatchClass","classNames","getPercentage","num","getList","renderList","Discussions","experiments","window","experimentVariables","content_authored","profileImages","content_average","learnerAnalyticsDiscussionAverage","average_percent","authored_percent","getCountChart","medium","count","percent","img","percentWidth","backgroundImage","width","thread_votes","getComparisons","number","days","months","DueDates","str","date","Date","day","getDay","month","getMonth","getDate","year","getFullYear","type","assignmentCounts","renderLabels","dates","initLabelTracker","sort","a","b","due","format","getLabel","list","labels","Object","keys","accumulator","key","exGrades","GradeTable","groupIndex","grades","groupData","filter","multipleAssignments","length","rows","assignment_type","total_possible","total_earned","passing_grade","assignmentTypes","passingGrade","percentGrade","getTableGroup","arrayToObject","obj","countByType","assignments","getActiveUserString","users","getAssignmentCounts","types","countsArray","getStreakIcons","Array","apply","e","i","getStreakEncouragement","action","getStreakString","unit","LearnerAnalyticsDashboard","grading_policy","schedule","schedule_raw","week_streak","weekly_active_users","discussion_info","profile_images","percent_grade","gradeBreakdown","GRADER","weight","Set","console","log","toLocaleString","useGrouping"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;AAEA,IAAMA,OAAO,GAAb;AACA,IAAMC,mBAAmBC,KAAKC,EAAL,GAAU,CAAnC;AACA,IAAMC,SAASJ,OAAO,CAAtB;AACA,IAAMK,SAASD,SAAS,CAAxB,C,CAA2B;;AAE3B;;IACME,W;;;AACJ,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA,0HACXA,KADW;;AAEjB,UAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeC,IAAf,OAAjB;AACA,UAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeD,IAAf,OAAjB;AAHiB;AAIlB;;;;gCAEW;AAAA,mBACwB,KAAKF,KAD7B;AAAA,UACHI,UADG,UACHA,UADG;AAAA,UACSC,WADT,UACSA,WADT;;AAEV,UAAID,UAAJ,EAAgB;AACd,YAAMX,QAAOI,SAAS,CAAtB;AACA,eACE,wEAAQ,IAAIA,MAAZ,EAAoB,IAAIA,MAAxB,EAAgC,GAAGJ,KAAnC,EAAyC,MAAMY,YAAYC,WAA3D,GADF;AAGD;AACF;;;8BAESC,M,EAAQF,W,EAAa;AAC7B,UAAMG,QAAQD,OAAOE,MAAP,CAAc,UAACC,UAAD;AAAA,YAAeC,KAAf,QAAeA,KAAf;AAAA,eAA2BD,aAAaC,KAAxC;AAAA,OAAd,EAA6D,CAA7D,CAAd;AAD6B,UAEtBL,WAFsB,GAEMD,WAFN,CAEtBC,WAFsB;AAAA,UAETM,WAFS,GAEMP,WAFN,CAETO,WAFS;;;AAI7B,UAAIC,aAAa,CAAjB;AACA,UAAIC,QAAQhB,MAAZ;AACA,UAAIiB,QAAQ,CAAZ;;AAEA;AACA,aAAOR,OAAOS,KAAP,CAAa,CAAb,EAAgBC,OAAhB,GAA0BC,GAA1B,CAA8B,iBAAwBC,KAAxB,EAAkC;AAAA,YAA/BR,KAA+B,SAA/BA,KAA+B;AAAA,YAAxBS,UAAwB,SAAxBA,UAAwB;;AACrE;AACA,YAAIT,UAAUH,KAAd,EAAqB;AACnB,iBACE,wEAAQ,GAAGV,MAAX;AACQ,gBAAID,MADZ;AAEQ,gBAAIA,MAFZ;AAGQ,uBAAU,SAHlB;AAIQ,iBAAKsB,KAJb,GADF;AAOD;;AAED,YAAIR,UAAU,CAAd,EAAiB;AACf;AACD;;AAED,YAAMU,kBAAkBV,QAAQH,KAAhC;;AAEA;AACA,YAAMc,UAAWD,mBAAmB,GAApB,GAA2B,CAA3B,GAA+B,CAA/C;;AAEAR,sBAAcQ,kBAAkB3B,gBAAhC;AACA,YAAM6B,QAAQ5B,KAAK6B,GAAL,CAASX,UAAT,IAAuBf,MAArC;AACA,YAAM2B,QAAQ9B,KAAK+B,GAAL,CAASb,UAAT,IAAuBf,MAArC;;AAEA;;;;;;AAMA,YAAM6B,IAAI,QACH9B,MADG,SACOA,MADP,SAEHiB,KAFG,SAEM,CAACC,KAFP,QAGJjB,MAHI,SAGMA,MAHN,EAIR,GAJQ,EAKLwB,OALK,SAMLC,QAAQT,KANH,SAMY,EAAEW,QAAQV,KAAV,CANZ,EAOR,GAPQ,EAQRa,IARQ,CAQH,GARG,CAAV;;AAUAd,gBAAQS,KAAR;AACAR,gBAAQU,KAAR;;AAEA,eAAO,sEAAM,GAAGE,CAAT;AACM,gCAAoBP,UAD1B;AAEM,eAAKD,KAFX;AAGM,kBAAQb,WAHd;AAIM,uBAAaM,WAJnB,GAAP;AAKD,OAjDM,CAAP;AAkDD;;;6BAEQ;AAAA,oBACuB,KAAKZ,KAD5B;AAAA,UACAO,MADA,WACAA,MADA;AAAA,UACQF,WADR,WACQA,WADR;;;AAGP,aACE;AAAA;AAAA,UAAK,kBAAgBZ,IAAhB,SAAwBA,IAA7B;AACE;AAAA;AAAA,YAAG,2BAAyBI,MAAzB,SAAmCA,MAAnC,MAAH;AACG,eAAKM,SAAL,CAAeI,MAAf,EAAuBF,WAAvB;AADH,SADF;AAIG,aAAKJ,SAAL;AAJH,OADF;AAQD;;;;EAzFuB,6CAAA4B,CAAMC,S;;AA4FhC/B,YAAYgC,YAAZ,GAA2B;AACzB1B,eAAa;AACXC,iBAAa,MADF;AAEXM,iBAAa;AAFF;AADY,CAA3B;;AAOAb,YAAYiC,SAAZ,GAAwB;AACtBzB,UAAQ,kDAAA0B,CAAUC,KAAV,CAAgBC,UADF;AAEtB/B,cAAY,kDAAA6B,CAAUG,IAFA;AAGtB/B,eAAa,kDAAA4B,CAAUI;AAHD,CAAxB;;AAMA,yDAAetC,WAAf,E;;;;;;;;;;;;;;;;;;;;;;ACnHA;AACA;AACA;;IAEMuC,iB;;;AACJ,6BAAYtC,KAAZ,EAAmB;AAAA;;AAAA,iIACXA,KADW;AAElB;;;;8BAES;AAAA;;AAAA,UACDuC,IADC,GACO,KAAKvC,KADZ,CACDuC,IADC;;;AAGR,aAAOA,KAAKrB,GAAL,CAAS,gBAA+BC,KAA/B,EAAyC;AAAA,YAAtCR,KAAsC,QAAtCA,KAAsC;AAAA,YAA/B6B,KAA+B,QAA/BA,KAA+B;AAAA,YAAxBpB,UAAwB,QAAxBA,UAAwB;;AACvD,YAAMqB,0BAAwBrB,UAA9B;AACA,eACE;AAAA;AAAA,YAAI,WAAU,aAAd,EAA4B,KAAKD,KAAjC;AACE,+EAAK,WAAW,kDAAAuB,CAAW,cAAX,EAA2BD,WAA3B,CAAhB;AACK,2BAAY,MADjB,GADF;AAGE;AAAA;AAAA,cAAM,WAAU,OAAhB;AAAyBD;AAAzB,WAHF;AAIE;AAAA;AAAA,cAAM,WAAU,YAAhB;AAA8B,mBAAKG,aAAL,CAAmBhC,KAAnB;AAA9B;AAJF,SADF;AAQD,OAVM,CAAP;AAWD;;;kCAEaA,K,EAAO;AACnB,UAAMiC,MAAMjC,QAAQ,GAApB;;AAEA,aAAUiC,GAAV;AACD;;;iCAEY;AACX,aACE;AAAA;AAAA,UAAI,WAAU,aAAd;AACG,aAAKC,OAAL;AADH,OADF;AAKD;;;6BAEQ;AACP,aACE;AAAA;AAAA,UAAK,WAAU,QAAf;AACG,aAAKC,UAAL;AADH,OADF;AAKD;;;;EAzC6B,6CAAAjB,CAAMC,S;;AA6CtCQ,kBAAkBN,SAAlB,GAA8B;AAC5BO,QAAM,kDAAAN,CAAUC,KAAV,CAAgBC;AADM,CAA9B;;AAIA,yDAAeG,iBAAf,E;;;;;;;;;;;;;;;;;;;;;;ACrDA;AACA;AACA;;IAEMS,W;;;AACJ,uBAAY/C,KAAZ,EAAmB;AAAA;;AAAA,qHACXA,KADW;AAElB;;;;qCAEgB;AACf,UAAMgD,cAAcC,OAAOC,mBAAP,IAA8B,EAAlD;AADe,mBAE2B,KAAKlD,KAFhC;AAAA,UAERmD,gBAFQ,UAERA,gBAFQ;AAAA,UAEUC,aAFV,UAEUA,aAFV;;AAGf,UAAMC,kBAAkBL,YAAYM,iCAAZ,IAAiD,CAAzE;AACA,UAAIC,kBAAkB,CAAtB;AACA,UAAIC,mBAAmB,CAAvB;;AAEA,UAAIH,kBAAkBF,gBAAtB,EAAwC;AACtCI,0BAAkB,CAAlB;AACAC,2BAAmBL,mBAAmBE,eAAtC;AACD,OAHD,MAGO;AACLG,2BAAmB,CAAnB;AACAD,0BAAkBF,kBAAkBF,gBAApC;AACD;;AAED,aACE;AAAA;AAAA,UAAK,WAAU,eAAf;AACG,aAAKM,aAAL,CAAmBN,gBAAnB,EAAqCK,gBAArC,EAAuD,KAAvD,EAA8DJ,cAAcM,MAA5E,CADH;AAEG,aAAKD,aAAL,CAAmBJ,eAAnB,EAAoCE,eAApC,EAAqD,kBAArD;AAFH,OADF;AAMD;;;kCAEaI,K,EAAOC,O,EAASpB,K,EAAoB;AAAA,UAAbqB,GAAa,uEAAP,KAAO;;AAChD,UAAIC,YAAJ;AACA,UAAIF,YAAY,CAAhB,EAAmB;AACfE,uBAAe,KAAf;AACH,OAFD,MAEO;AACLA,uBAAe,0BAA0BF,OAA1B,GAAoC,GAAnD;AACD;AACD,aACE;AAAA;AAAA,UAAK,WAAU,aAAf;AACE,6EAAK,WAAW,kDAAAlB,CACR,YADQ,EAER,EAAC,wBAAwB,CAACmB,GAA1B,EAFQ,CAAhB;AAIM,iBAAO,EAACE,iBAAiB,CAAC,CAACF,GAAF,YAAeA,GAAf,SAAwB,MAA1C,EAJb;AAKM,yBAAY,MALlB,GADF;AAOE;AAAA;AAAA,YAAK,WAAU,aAAf;AAA8BrB;AAA9B,SAPF;AAQE;AAAA;AAAA,YAAK,WAAU,eAAf;AACE,+EAAK,WAAU,WAAf;AACK,2BAAY,MADjB;AAEK,mBAAO,EAACwB,YAAUF,YAAX,EAFZ,GADF;AAIE;AAAA;AAAA,cAAM,WAAU,YAAhB;AAA8BH;AAA9B;AAJF;AARF,OADF;AAiBD;;;6BAEQ;AAAA,oBACkC,KAAK3D,KADvC;AAAA,UACAmD,gBADA,WACAA,gBADA;AAAA,UACkBc,YADlB,WACkBA,YADlB;;;AAGP,aACE;AAAA;AAAA,UAAK,WAAU,qBAAf;AACE;AAAA;AAAA,YAAI,WAAU,eAAd;AAAA;AAAA,SADF;AAEE;AAAA;AAAA,YAAK,WAAU,mBAAf;AACE;AAAA;AAAA,cAAI,WAAU,iBAAd;AAAA;AAAA,WADF;AAEG,eAAKC,cAAL;AAFH,SAFF;AAME;AAAA;AAAA,YAAK,WAAU,aAAf;AACE;AAAA;AAAA,cAAK,WAAU,eAAf;AACE,kFAAM,WAAU,gCAAhB,EAAiD,eAAY,MAA7D,GADF;AAEE;AAAA;AAAA,gBAAM,WAAU,YAAhB;AAA8BD;AAA9B,aAFF;AAGE;AAAA;AAAA,gBAAG,WAAU,OAAb;AAAA;AAAA;AAHF;AADF;AANF,OADF;AAgBD;;;;EAzEuB,6CAAApC,CAAMC,S;;AA6EhCiB,YAAYf,SAAZ,GAAwB;AACtBmB,oBAAkB,kDAAAlB,CAAUkC,MAAV,CAAiBhC,UADb;AAEtB8B,gBAAc,kDAAAhC,CAAUkC,MAAV,CAAiBhC;AAFT,CAAxB;;AAKA,yDAAeY,WAAf,E;;;;;;;;;;;;;;;;;;;;;;ACtFA;AACA;AACA;;AAEA,IAAMqB,OAAO,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,CAAb;AACA,IAAMC,SAAS,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,EAAkD,KAAlD,EAAyD,KAAzD,EAAgE,KAAhE,EAAuE,KAAvE,EAA8E,KAA9E,CAAf;;IAEMC,Q;;;AACJ,oBAAYtE,KAAZ,EAAmB;AAAA;;AAAA,+GACXA,KADW;AAElB;;;;4BAEOuE,G,EAAK;AACX,UAAMC,OAAO,IAAIC,IAAJ,CAASF,GAAT,CAAb;AACA,UAAMG,MAAMN,KAAKI,KAAKG,MAAL,EAAL,CAAZ;AACA,UAAMC,QAAQP,OAAOG,KAAKK,QAAL,EAAP,CAAd;AACA,UAAMV,SAASK,KAAKM,OAAL,EAAf;AACA,UAAMC,OAAOP,KAAKQ,WAAL,EAAb;;AAEA,aAAUN,GAAV,SAAiBE,KAAjB,SAA0BT,MAA1B,UAAqCY,IAArC;AACD;;;6BAEQE,I,EAAM;AAAA,UACNC,gBADM,GACc,KAAKlF,KADnB,CACNkF,gBADM;;AAEb,UAAIA,iBAAiBD,IAAjB,IAAyB,CAA7B,EAAiC;AAC/B,eAAOA,IAAP;AACD,OAFD,MAEO;AACL,aAAKE,YAAL,CAAkBF,IAAlB,KAA2B,CAA3B;AACA,eAAOA,OAAO,GAAP,GAAa,KAAKE,YAAL,CAAkBF,IAAlB,CAApB;AACD;AACF;;;8BAES;AAAA;;AAAA,mBAC0B,KAAKjF,KAD/B;AAAA,UACDoF,KADC,UACDA,KADC;AAAA,UACMF,gBADN,UACMA,gBADN;;AAER,WAAKC,YAAL,GAAoB,KAAKE,gBAAL,CAAsBH,gBAAtB,CAApB;;AAEA,aAAOE,MAAME,IAAN,CAAW,UAACC,CAAD,EAAIC,CAAJ;AAAA,eAAU,IAAIf,IAAJ,CAASc,EAAEE,GAAX,IAAkB,IAAIhB,IAAJ,CAASe,EAAEC,GAAX,CAA5B;AAAA,OAAX,EACMvE,GADN,CACU,gBAAkBC,KAAlB,EAA4B;AAAA,YAAzBuE,MAAyB,QAAzBA,MAAyB;AAAA,YAAjBD,GAAiB,QAAjBA,GAAiB;;AAC/B,eACE;AAAA;AAAA,YAAI,WAAU,WAAd,EAA0B,KAAKtE,KAA/B;AACE;AAAA;AAAA,cAAK,WAAU,OAAf;AAAwB,mBAAKwE,QAAL,CAAcD,MAAd;AAAxB,WADF;AAEE;AAAA;AAAA,cAAK,WAAU,MAAf;AAAuB,mBAAKZ,OAAL,CAAaW,GAAb;AAAvB;AAFF,SADF;AAMD,OARN,CAAP;AASD;;;qCAEgBG,I,EAAM;AACrB,UAAIC,SAASC,OAAOC,IAAP,CAAYH,IAAZ,CAAb;;AAEA,aAAOC,OAAOpF,MAAP,CAAc,UAACuF,WAAD,EAAcC,GAAd,EAAsB;AACzCD,oBAAYC,GAAZ,IAAmB,CAAnB;AACA,eAAOD,WAAP;AACD,OAHM,EAGJ,EAHI,CAAP;AAID;;;iCAEY;AACX,aACE;AAAA;AAAA,UAAI,WAAU,WAAd;AACG,aAAKnD,OAAL;AADH,OADF;AAKD;;;6BAEQ;AACP,aACE;AAAA;AAAA,UAAK,WAAU,WAAf;AACG,aAAKC,UAAL;AADH,OADF;AAKD;;;;EA/DoB,6CAAAjB,CAAMC,S;;AAmE7BwC,SAAStC,SAAT,GAAqB;AACnBoD,SAAO,kDAAAnD,CAAUC,KAAV,CAAgBC;AADJ,CAArB;;AAIA,0EAAemC,QAAf,E;;;;;;;;;;;;;;;;;;;;;;AC9EA;AACA;AACA;AACA,IAAM4B,WAAW,CACf;AACE,qBAAkB,MADpB;AAEE,oBAAiB,GAFnB;AAGE,kBAAe;AAHjB,CADe,EAMf;AACE,qBAAkB,UADpB;AAEE,oBAAiB;AAFnB,CANe,EAUf;AACE,qBAAkB,UADpB;AAEE,oBAAiB,IAFnB;AAGE,kBAAe;AAHjB,CAVe,CAAjB;;IAiBMC,U;;;AACJ,sBAAYnG,KAAZ,EAAmB;AAAA;;AAAA,mHACXA,KADW;AAElB;;;;kCAEaiF,I,EAAMmB,U,EAAY;AAAA,UACvBC,MADuB,GACb,KAAKrG,KADQ,CACvBqG,MADuB;;AAE9B,UAAMC,YAAYD,OAAOE,MAAP,CAAc,iBAAS;AACvC,YAAI5F,MAAM,iBAAN,MAA6BsE,IAAjC,EAAuC;AACrC,iBAAOtE,KAAP;AACD;AACF,OAJiB,CAAlB;AAKA,UAAM6F,sBAAsBF,UAAUG,MAAV,GAAmB,CAA/C;;AAEA,UAAMC,OAAOJ,UAAUpF,GAAV,CAAc,gBAAiEC,KAAjE,EAA2E;AAAA,YAAzEwF,eAAyE,QAAzEA,eAAyE;AAAA,YAAxDC,cAAwD,QAAxDA,cAAwD;AAAA,YAAxCC,YAAwC,QAAxCA,YAAwC;AAAA,YAA1BC,aAA0B,QAA1BA,aAA0B;;AACpG,YAAMtE,QAAQgE,sBAAyBG,eAAzB,UAA4CxF,QAAQ,CAApD,IAA0DwF,eAAxE;AACA,eACE;AAAA;AAAA,YAAI,KAAKxF,KAAT;AACE;AAAA;AAAA;AAAKqB;AAAL,WADF;AAEE;AAAA;AAAA;AAAKsE,yBAAL;AAAA;AAAqBF;AAArB,WAFF;AAGE;AAAA;AAAA;AAAKC,wBAAL;AAAA;AAAoBD;AAApB;AAHF,SADF;AAOD,OATY,CAAb;;AAWA,aAAOF,KAAKD,MAAL,GAAc;AAAA;AAAA,UAAO,WAAU,YAAjB,EAA8B,KAAKL,UAAnC;AAAgDM;AAAhD,OAAd,GAA8E,KAArF;AACD;;;6BAEQ;AAAA;;AAAA,mBAC+C,KAAK1G,KADpD;AAAA,UACA+G,eADA,UACAA,eADA;AAAA,UACiBC,YADjB,UACiBA,YADjB;AAAA,UAC+BC,YAD/B,UAC+BA,YAD/B;;AAEP,aACE;AAAA;AAAA,UAAO,WAAU,mBAAjB;AACE;AAAA;AAAA,YAAO,WAAU,YAAjB;AACE;AAAA;AAAA;AACE;AAAA;AAAA;AAAA;AAAA,aADF;AAEE;AAAA;AAAA;AAAA;AAAA,aAFF;AAGE;AAAA;AAAA;AAAA;AAAA;AAHF;AADF,SADF;AAQGF,wBAAgB7F,GAAhB,CAAoB,UAAC+D,IAAD,EAAO9D,KAAP;AAAA,iBAAiB,OAAK+F,aAAL,CAAmBjC,IAAnB,EAAyB9D,KAAzB,CAAjB;AAAA,SAApB,CARH;AASE;AAAA;AAAA;AACE;AAAA;AAAA,cAAI,WAAU,QAAd;AACE;AAAA;AAAA,gBAAI,WAAU,cAAd;AAAA;AAAA,aADF;AAEE;AAAA;AAAA;AAAK6F,0BAAL;AAAA;AAAA,aAFF;AAGE;AAAA;AAAA;AAAA;AAAMC,0BAAN;AAAA;AAAA;AAHF;AADF;AATF,OADF;AAmBD;;;;EAjDsB,6CAAApF,CAAMC,S;;AAkD9B;;AAEDqE,WAAWnE,SAAX,GAAuB;AACrB+E,mBAAiB,kDAAA9E,CAAUC,KAAV,CAAgBC,UADZ;AAErBkE,UAAQ,kDAAApE,CAAUC,KAAV,CAAgBC,UAFH;AAGrB6E,gBAAc,kDAAA/E,CAAUkC,MAAV,CAAiBhC,UAHV;AAIrB8E,gBAAc,kDAAAhF,CAAUkC,MAAV,CAAiBhC;AAJV,CAAvB;;AAOA,yDAAegE,UAAf,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/EA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASgB,aAAT,CAAuBjF,KAAvB,EAA8B;AAC5B,SAAOA,MAAMzB,MAAN,CAAa,UAACuF,WAAD,EAAcoB,GAAd,EAAsB;AACxC,QAAMnB,MAAMH,OAAOC,IAAP,CAAYqB,GAAZ,EAAiB,CAAjB,CAAZ;AACApB,gBAAYC,GAAZ,IAAmBmB,IAAInB,GAAJ,CAAnB;AACA,WAAOD,WAAP;AACD,GAJM,EAIJ,EAJI,CAAP;AAKD;;AAED,SAASqB,WAAT,CAAqBpC,IAArB,EAA2BqC,WAA3B,EAAwC;AACtC,MAAI3D,QAAQ,CAAZ;AACA2D,cAAYpG,GAAZ,CAAgB,gBAAc;AAAA,QAAZwE,MAAY,QAAZA,MAAY;;AAC5B,QAAIA,WAAWT,IAAf,EAAqB;AACnBtB,eAAS,CAAT;AACD;AACF,GAJD;AAKA,SAAOA,KAAP;AACD;;AAED,SAAS4D,mBAAT,CAA6B5D,KAA7B,EAAoC;AAClC,MAAM6D,QAAS7D,UAAU,CAAX,GAAgB,MAAhB,GAAyB,OAAvC;AACA,SAAU6D,KAAV;AACD;;AAED,SAASC,mBAAT,CAA6BC,KAA7B,EAAoCJ,WAApC,EAAiD;AAC/C,MAAMK,cAAcD,MAAMxG,GAAN,CAAU,UAAC+D,IAAD,EAAU;AACtC,+BACGA,IADH,EACUoC,YAAYpC,IAAZ,EAAkBqC,WAAlB,CADV;AAGD,GAJmB,CAApB;;AAMA,SAAOH,cAAcQ,WAAd,CAAP;AACD;;AAED,SAASC,cAAT,CAAwBjE,KAAxB,EAA+B;AAC7B,SAAOkE,MAAMC,KAAN,CAAY,IAAZ,EAAkB,EAAErB,QAAQ9C,KAAV,EAAlB,EAAqCzC,GAArC,CAAyC,UAAC6G,CAAD,EAAIC,CAAJ;AAAA,WAC9C,sEAAM,WAAU,cAAhB,EAA+B,eAAY,MAA3C,EAAkD,KAAKA,CAAvD,GAD8C;AAAA,GAAzC,CAAP;AAGD;;AAED,SAASC,sBAAT,CAAgCtE,KAAhC,EAAuC;AACrC,MAAMuE,SAAUvE,QAAQ,CAAT,GAAc,UAAd,GAA2B,OAA1C;;AAEA,SAAUuE,MAAV;AACD;;AAED,SAASC,eAAT,CAAyBxE,KAAzB,EAAgC;AAC9B,MAAMyE,OAAQzE,UAAS,CAAV,GAAe,MAAf,GAAwB,OAArC;AACA,SAAQA,QAAQ,CAAT,eAAwBA,KAAxB,SAAiCyE,IAAjC,iBAAmD,KAA1D;AACD;;AAEM,SAASC,yBAAT,CAAmCrI,KAAnC,EAA0C;AAAA,MACxCsI,cADwC,GAC2GtI,KAD3G,CACxCsI,cADwC;AAAA,MACxBjC,MADwB,GAC2GrG,KAD3G,CACxBqG,MADwB;AAAA,MAChBkC,QADgB,GAC2GvI,KAD3G,CAChBuI,QADgB;AAAA,MACNC,YADM,GAC2GxI,KAD3G,CACNwI,YADM;AAAA,MACQC,WADR,GAC2GzI,KAD3G,CACQyI,WADR;AAAA,MACqBC,mBADrB,GAC2G1I,KAD3G,CACqB0I,mBADrB;AAAA,MAC0CC,eAD1C,GAC2G3I,KAD3G,CAC0C2I,eAD1C;AAAA,MAC2DC,cAD3D,GAC2G5I,KAD3G,CAC2D4I,cAD3D;AAAA,MAC2E9B,aAD3E,GAC2G9G,KAD3G,CAC2E8G,aAD3E;AAAA,MAC0F+B,aAD1F,GAC2G7I,KAD3G,CAC0F6I,aAD1F;;AAE/C,MAAMC,iBAAiBR,eAAeS,MAAf,CAAsB7H,GAAtB,CAA0B,iBAAiBC,KAAjB,EAA2B;AAAA,QAAzB8D,IAAyB,SAAzBA,IAAyB;AAAA,QAAnB+D,MAAmB,SAAnBA,MAAmB;;AAC1E,WAAO;AACLrI,aAAOqI,MADF;AAELxG,aAAOyC,IAFF;AAGL7D,kBAAYD,QAAQ;AAHf,KAAP;AAKD,GANsB,CAAvB;;AAQA;AACA,MAAMmG,cAAcwB,eAAe5H,GAAf,CAAmB;AAAA,WAASP,MAAM,OAAN,CAAT;AAAA,GAAnB,CAApB;AACA,MAAMoG,+CAAsB,IAAIkC,GAAJ,CAAQ3B,WAAR,CAAtB,EAAN;AACA,MAAMpC,mBAAmBuC,oBAAoBV,eAApB,EAAqCwB,QAArC,CAAzB;;AAEAW,UAAQC,GAAR,CAAYX,YAAZ;AACAU,UAAQC,GAAR,CAAY9C,MAAZ;;AAEA,SACE;AAAA;AAAA,MAAK,WAAU,2BAAf;AACE;AAAA;AAAA,QAAK,WAAU,YAAf;AACE;AAAA;AAAA,UAAK,WAAU,iBAAf;AACE;AAAA;AAAA,YAAI,WAAU,eAAd;AAAA;AAAA,SADF;AAEGyC,0BACC;AAAA;AAAA,YAAI,WAAU,iBAAd;AAAA;AAAA,SAHJ;AAKGA,0BACC;AAAA;AAAA,YAAK,WAAU,wBAAf;AACE;AAAA;AAAA,cAAK,WAAU,eAAf;AACE,wEAAC,6DAAD;AACE,sBAAQA,cADV;AAEE,0BAAY,IAFd;AAGE,2BAAa;AACTxI,6BAAa,SADJ;AAETM,6BAAa;AAFJ;AAHf;AADF,WADF;AAWE,sEAAC,mEAAD,IAAmB,MAAMkI,cAAzB;AAXF,SANJ;AAqBE;AAAA;AAAA,YAAI,WAAU,iBAAd;AAAA;AAAA,SArBF;AAuBE;AAAA;AAAA,YAAK,WAAU,4BAAf;AACE,sEAAC,4DAAD,IAAY,iBAAiB/B,eAA7B;AACY,oBAAQV,MADpB;AAEY,0BAAcS,aAF1B;AAGY,0BAAc+B,aAH1B,GADF;AAKE;AAAA;AAAA,cAAK,WAAU,UAAf;AAAA;AAAA;AALF;AAvBF,OADF;AAgCE;AAAA;AAAA,UAAK,WAAU,iBAAf;AACE,oEAAC,6DAAD,eAAiBF,eAAjB,IAAkC,eAAeC,cAAjD;AADF;AAhCF,KADF;AAqCE;AAAA;AAAA,QAAK,WAAU,qCAAf;AACE;AAAA;AAAA,UAAI,WAAU,eAAd;AAAA;AAAA,OADF;AAEE;AAAA;AAAA,UAAK,WAAU,qBAAf;AACE;AAAA;AAAA,YAAI,WAAU,iBAAd;AAAA;AAAA,SADF;AAEGH,sBAAc,CAAd,IACC;AAAA;AAAA,YAAK,WAAU,qBAAf,EAAqC,eAAY,MAAjD;AAAyDb,yBAAea,WAAf;AAAzD,SAHJ;AAKE;AAAA;AAAA;AAAIN,0BAAgBM,WAAhB;AAAJ,SALF;AAME;AAAA;AAAA,YAAG,WAAU,sBAAb;AAAqCR,iCAAuBQ,WAAvB;AAArC,SANF;AAOE;AAAA;AAAA,YAAI,WAAU,iBAAd;AACE;AAAA;AAAA;AAAA;AAAA,WADF;AAEE;AAAA;AAAA;AAAA;AAAA,WAFF;AAGE;AAAA;AAAA;AAAA;AAAA;AAHF;AAPF,OAFF;AAeE;AAAA;AAAA,UAAK,WAAU,sBAAf;AACE,8EAAM,WAAU,uBAAhB,EAAwC,eAAY,MAApD,GADF;AAEE;AAAA;AAAA,YAAM,WAAU,YAAhB;AAA8BC,8BAAoBU,cAApB,CAAmC,IAAnC,EAAyC,EAACC,aAAY,IAAb,EAAzC;AAA9B,SAFF;AAGE;AAAA;AAAA,YAAG,WAAU,OAAb;AAAsB9B,8BAAoBmB,mBAApB;AAAtB;AAHF;AAfF;AArCF,GADF;AA6DD,C","file":"LearnerAnalyticsDashboard.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nconst size = 100;\nconst radCircumference = Math.PI * 2;\nconst center = size / 2;\nconst radius = center - 1; // padding to prevent clipping\n\n// Based on https://github.com/brigade/react-simple-pie-chart\nclass CircleChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.getCenter = this.getCenter.bind(this);\n    this.getSlices = this.getSlices.bind(this);\n  }\n  \n  getCenter() {\n    const {centerHole, sliceBorder} = this.props;\n    if (centerHole) {\n      const size = center / 2;\n      return (\n        <circle cx={center} cy={center} r={size} fill={sliceBorder.strokeColor} />\n      );\n    }\n  }\n\n  getSlices(slices, sliceBorder) {\n    const total = slices.reduce((totalValue, { value }) => totalValue + value, 0);\n    const {strokeColor, strokeWidth} = sliceBorder;\n\n    let radSegment = 0;\n    let lastX = radius;\n    let lastY = 0;\n\n    // Reverse a copy of the array so order start at 12 o'clock\n    return slices.slice(0).reverse().map(({ value, sliceIndex }, index) => {\n      // Should we just draw a circle?\n      if (value === total) {\n        return (\n          <circle r={radius}\n                  cx={center}\n                  cy={center}\n                  className=\"slice-1\"\n                  key={index} />\n        );\n      }\n\n      if (value === 0) {\n        return;\n      }\n\n      const valuePercentage = value / total;\n\n      // Should the arc go the long way round?\n      const longArc = (valuePercentage <= 0.5) ? 0 : 1;\n\n      radSegment += valuePercentage * radCircumference;\n      const nextX = Math.cos(radSegment) * radius;\n      const nextY = Math.sin(radSegment) * radius;\n\n      /**\n       * d is a string that describes the path of the slice.\n       * The weirdly placed minus signs [eg, (-(lastY))] are due to the fact\n       * that our calculations are for a graph with positive Y values going up,\n       * but on the screen positive Y values go down.\n       */\n      const d = [\n        `M ${center},${center}`,\n        `l ${lastX},${-lastY}`,\n        `a${radius},${radius}`,\n        '0',\n        `${longArc},0`,\n        `${nextX - lastX},${-(nextY - lastY)}`,\n        'z',\n      ].join(' ');\n\n      lastX = nextX;\n      lastY = nextY;\n\n      return <path d={d}\n                   className={`slice-${sliceIndex}`}\n                   key={index}\n                   stroke={strokeColor}\n                   strokeWidth={strokeWidth} />;\n    });\n  }\n\n  render() {\n    const {slices, sliceBorder} = this.props;\n\n    return (\n      <svg viewBox={`0 0 ${size} ${size}`}>\n        <g transform={`rotate(-90 ${center} ${center})`}>\n          {this.getSlices(slices, sliceBorder)}\n        </g>\n        {this.getCenter()}\n      </svg>\n    );\n  }\n}\n\nCircleChart.defaultProps = {\n  sliceBorder: {\n    strokeColor: '#fff',\n    strokeWidth: 0\n  }\n};\n\nCircleChart.propTypes = {\n  slices: PropTypes.array.isRequired,\n  centerHole: PropTypes.bool,\n  sliceBorder: PropTypes.object\n};\n\nexport default CircleChart;\n\n\n\n// WEBPACK FOOTER //\n// ./lms/static/js/learner_analytics_dashboard/CircleChart.jsx","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nclass CircleChartLegend extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  \n  getList() {\n    const {data} = this.props;\n\n    return data.map(({ value, label, sliceIndex }, index) => {\n      const swatchClass = `swatch-${sliceIndex}`;\n      return (\n        <li className=\"legend-item\" key={index}>\n          <div className={classNames('color-swatch', swatchClass)}\n               aria-hidden=\"true\"></div>\n          <span className=\"label\">{label}</span>\n          <span className=\"percentage\">{this.getPercentage(value)}</span>\n        </li>\n      );\n    });\n  }\n\n  getPercentage(value) {\n    const num = value * 100;\n\n    return `${num}%`;\n  }\n\n  renderList() {\n    return (\n      <ul className=\"legend-list\">\n        {this.getList()}\n      </ul>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"legend\">\n        {this.renderList()}\n      </div>\n    );\n  }\n}\n\n\nCircleChartLegend.propTypes = {\n  data: PropTypes.array.isRequired\n}\n\nexport default CircleChartLegend;\n\n\n\n// WEBPACK FOOTER //\n// ./lms/static/js/learner_analytics_dashboard/CircleChartLegend.jsx","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nclass Discussions extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  getComparisons() {\n    const experiments = window.experimentVariables || {};\n    const {content_authored, profileImages} = this.props;\n    const content_average = experiments.learnerAnalyticsDiscussionAverage || 4;\n    let average_percent = 1;\n    let authored_percent = 0;\n\n    if (content_average > content_authored) {\n      average_percent = 1;\n      authored_percent = content_authored / content_average;\n    } else {\n      authored_percent = 1;\n      average_percent = content_average / content_authored;\n    }\n\n    return (\n      <div className=\"chart-wrapper\">\n        {this.getCountChart(content_authored, authored_percent, 'You', profileImages.medium)}\n        {this.getCountChart(content_average, average_percent, 'Average graduate')}\n      </div>\n    );\n  }\n\n  getCountChart(count, percent, label, img = false) {\n    var percentWidth;\n    if (percent === 0) {\n        percentWidth = '2px';\n    } else {\n      percentWidth = 'calc((100% - 40px) * ' + percent + ')';\n    }\n    return (\n      <div className=\"count-chart\">\n        <div className={classNames(\n                'chart-icon',\n                {'fa fa-graduation-cap': !img}\n              )}\n              style={{backgroundImage: !!img ? `url(${img})` : 'none'}}\n              aria-hidden=\"true\"></div>\n        <div className=\"chart-label\">{label}</div>\n        <div className=\"chart-display\">\n          <div className=\"chart-bar\"\n               aria-hidden=\"true\"\n               style={{width: `${percentWidth}`}}></div>\n          <span className=\"user-count\">{count}</span>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    const {content_authored, thread_votes} = this.props;\n\n    return (\n      <div className=\"discussions-wrapper\">\n        <h2 className=\"group-heading\">Discussions</h2>\n        <div className=\"comparison-charts\">\n          <h3 className=\"section-heading\">Posts, comments, and replies</h3>\n          {this.getComparisons()}\n        </div>\n        <div className=\"post-counts\">\n          <div className=\"votes-wrapper\">\n            <span className=\"fa fa-plus-square-o count-icon\" aria-hidden=\"true\"></span>\n            <span className=\"user-count\">{thread_votes}</span>\n            <p className=\"label\">Votes on your posts, comments, and replies</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nDiscussions.propTypes = {\n  content_authored: PropTypes.number.isRequired,\n  thread_votes: PropTypes.number.isRequired\n}\n\nexport default Discussions;\n\n\n\n// WEBPACK FOOTER //\n// ./lms/static/js/learner_analytics_dashboard/Discussions.jsx","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nconst days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nconst months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\nclass DueDates extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  getDate(str) {\n    const date = new Date(str);\n    const day = days[date.getDay()];\n    const month = months[date.getMonth()];\n    const number = date.getDate();\n    const year = date.getFullYear();\n\n    return `${day} ${month} ${number}, ${year}`;\n  }\n\n  getLabel(type) {\n    const {assignmentCounts} = this.props;\n    if (assignmentCounts[type] < 2 ) {\n      return type;\n    } else {\n      this.renderLabels[type] += 1;\n      return type + ' ' + this.renderLabels[type];\n    }\n  }\n  \n  getList() {\n    const {dates, assignmentCounts} = this.props;\n    this.renderLabels = this.initLabelTracker(assignmentCounts);\n \n    return dates.sort((a, b) => new Date(a.due) > new Date(b.due))\n                .map(({ format, due }, index) => {\n                  return (\n                    <li className=\"date-item\" key={index}>\n                      <div className=\"label\">{this.getLabel(format)}</div>\n                      <div className=\"data\">{this.getDate(due)}</div>\n                    </li>\n                  );\n                });\n  }\n\n  initLabelTracker(list) {\n    let labels = Object.keys(list);\n\n    return labels.reduce((accumulator, key) => {\n      accumulator[key] = 0;\n      return accumulator;\n    }, {}) \n  }\n\n  renderList() {\n    return (\n      <ul className=\"date-list\">\n        {this.getList()}\n      </ul>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"due-dates\">\n        {this.renderList()}\n      </div>\n    );\n  }\n}\n\n\nDueDates.propTypes = {\n  dates: PropTypes.array.isRequired\n}\n\nexport default DueDates;\n\n\n\n// WEBPACK FOOTER //\n// ./lms/static/js/learner_analytics_dashboard/DueDates.jsx","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nconst exGrades = [  \n  {  \n    \"assignment_type\":\"Exam\",\n    \"total_possible\":6.0,\n    \"total_earned\":3.0\n  },\n  {  \n    \"assignment_type\":\"Homework\",\n    \"total_possible\":5.0,\n  },\n  {  \n    \"assignment_type\":\"Homework\",\n    \"total_possible\":11.0,\n    \"total_earned\":0.0\n  }\n];\n\nclass GradeTable extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  \n  getTableGroup(type, groupIndex) {\n    const {grades} = this.props;\n    const groupData = grades.filter(value => {\n      if (value['assignment_type'] === type) {\n        return value;\n      }\n    });\n    const multipleAssignments = groupData.length > 1;\n\n    const rows = groupData.map(({assignment_type, total_possible, total_earned, passing_grade}, index) => {\n      const label = multipleAssignments ? `${assignment_type} ${index + 1}` : assignment_type; \n      return (\n        <tr key={index}>\n          <td>{label}</td>\n          <td>{passing_grade}/{total_possible}</td>\n          <td>{total_earned}/{total_possible}</td>\n       </tr>\n      );\n    });\n\n    return rows.length ? <tbody className=\"type-group\" key={groupIndex}>{rows}</tbody> : false;\n  }\n  \n  render() {\n    const {assignmentTypes, passingGrade, percentGrade} = this.props;\n    return (\n      <table className=\"table grade-table\">\n        <thead className=\"table-head\">\n          <tr>\n            <th>Assignment</th>\n            <th>Passing</th>\n            <th>You</th>\n          </tr>\n        </thead>\n        {assignmentTypes.map((type, index) => this.getTableGroup(type, index))}\n        <tfoot>\n          <tr className=\"totals\">\n            <td className=\"footer-label\">Total</td>\n            <td>{passingGrade}%</td>\n            <td>*{percentGrade}%</td>\n          </tr>\n        </tfoot>\n       </table>\n    )\n  }\n};\n\nGradeTable.propTypes = {\n  assignmentTypes: PropTypes.array.isRequired,\n  grades: PropTypes.array.isRequired,\n  passingGrade: PropTypes.number.isRequired,\n  percentGrade: PropTypes.number.isRequired\n}\n\nexport default GradeTable;\n\n\n\n// WEBPACK FOOTER //\n// ./lms/static/js/learner_analytics_dashboard/GradeTable.jsx","/* global gettext */\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport classNames from 'classnames';\nimport CircleChart from './CircleChart';\nimport CircleChartLegend from './CircleChartLegend';\nimport GradeTable from './GradeTable';\nimport DueDates from './DueDates';\nimport Discussions from './Discussions';\n\nfunction arrayToObject(array) {\n  return array.reduce((accumulator, obj) => {\n    const key = Object.keys(obj)[0];\n    accumulator[key] = obj[key];\n    return accumulator;\n  }, {})\n}\n\nfunction countByType(type, assignments) {\n  let count = 0;\n  assignments.map(({format}) => {\n    if (format === type) {\n      count += 1;\n    }\n  })\n  return count;\n}\n\nfunction getActiveUserString(count) {\n  const users = (count === 1) ? 'User' : 'Users';\n  return `${users} active in this course right now`;\n}\n\nfunction getAssignmentCounts(types, assignments) {\n  const countsArray = types.map((type) => {\n    return {\n      [type]: countByType(type, assignments)\n    }\n  });\n\n  return arrayToObject(countsArray);\n}\n\nfunction getStreakIcons(count) {\n  return Array.apply(null, { length: count }).map((e, i) => (\n    <span className=\"fa fa-trophy\" aria-hidden=\"true\" key={i}></span>\n  ));\n}\n\nfunction getStreakEncouragement(count) {\n  const action = (count > 0) ? 'Maintain' : 'Start';\n\n  return `${action} your active streak by`;\n}\n\nfunction getStreakString(count) {\n  const unit = (count ===1) ? 'week' : 'weeks';\n  return (count > 0) ? `Active ${count} ${unit} in a row` : false;\n}\n\nexport function LearnerAnalyticsDashboard(props) {\n  const {grading_policy, grades, schedule, schedule_raw, week_streak, weekly_active_users, discussion_info, profile_images, passing_grade, percent_grade} = props;\n  const gradeBreakdown = grading_policy.GRADER.map(({type, weight}, index) => {\n    return {\n      value: weight,\n      label: type,\n      sliceIndex: index + 1\n    }\n  });\n\n  // Get a list of assignment types minus duplicates\n  const assignments = gradeBreakdown.map(value => value['label']);\n  const assignmentTypes = [...new Set(assignments)];\n  const assignmentCounts = getAssignmentCounts(assignmentTypes, schedule);\n\n  console.log(schedule_raw);\n  console.log(grades);\n\n  return (\n    <div className=\"learner-analytics-wrapper\">\n      <div className=\"main-block\">\n        <div className=\"analytics-group\">\n          <h2 className=\"group-heading\">Grading</h2>\n          {gradeBreakdown && \n            <h3 className=\"section-heading\">Weight</h3>\n          }\n          {gradeBreakdown && \n            <div className=\"grading-weight-wrapper\">\n              <div className=\"chart-wrapper\">\n                <CircleChart\n                  slices={gradeBreakdown}\n                  centerHole={true}\n                  sliceBorder={{\n                      strokeColor: '#f5f5f5',\n                      strokeWidth: 2\n                  }}\n                />\n              </div>\n              <CircleChartLegend data={gradeBreakdown} />\n            </div>\n          }\n\n          <h3 className=\"section-heading\">Graded Assignments</h3>\n          {/* TODO: LEARNER-3854: If implementing Learner Analytics, rename to graded-assignments-wrapper. */}\n          <div className=\"graded-assessments-wrapper\">\n            <GradeTable assignmentTypes={assignmentTypes}\n                        grades={grades}\n                        passingGrade={passing_grade}\n                        percentGrade={percent_grade} />\n            <div className=\"footnote\">* Your current grade is calculated based on all assignments, including those you have not yet completed.</div>\n          </div>\n        </div>\n        <div className=\"analytics-group\">\n          <Discussions {...discussion_info} profileImages={profile_images} />\n        </div>\n      </div>\n      <div className=\"analytics-group sidebar week-streak\">\n        <h2 className=\"group-heading\">Timing</h2>\n        <div className=\"week-streak-wrapper\">\n          <h3 className=\"section-heading\">Week streak</h3>\n          {week_streak > 0 && \n            <div className=\"streak-icon-wrapper\" aria-hidden=\"true\">{getStreakIcons(week_streak)}</div>\n          }\n          <p>{getStreakString(week_streak)}</p>\n          <p className=\"streak-encouragement\">{getStreakEncouragement(week_streak)}</p>\n          <ul className=\"streak-criteria\">\n            <li>Answering problems</li>\n            <li>Participating in discussions</li>\n            <li>Watching course videos</li>\n          </ul>\n        </div>\n        <div className=\"active-users-wrapper\">\n          <span className=\"fa fa-user count-icon\" aria-hidden=\"true\"></span>\n          <span className=\"user-count\">{weekly_active_users.toLocaleString('en', {useGrouping:true})}</span>\n          <p className=\"label\">{getActiveUserString(weekly_active_users)}</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./lms/static/js/learner_analytics_dashboard/LearnerAnalyticsDashboard.jsx"],"sourceRoot":""}