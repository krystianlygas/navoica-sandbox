{"version":3,"sources":["webpack:///./lms/static/js/student_account/components/StudentAccountDeletion.jsx?0536","webpack:///./lms/static/js/student_account/components/StudentAccountDeletionModal.jsx?721f"],"names":["StudentAccountDeletion","props","closeDeletionModal","bind","loadDeletionModal","state","deletionModalOpen","setState","modalTrigger","focus","loseAccessText","StringUtils","interpolate","gettext","htmlStart","htmlEnd","__html","input","React","Component","StudentAccountDeletionConfirmationModal","deleteAccount","handlePasswordInputChange","passwordFieldValidation","password","passwordSubmitted","passwordValid","validationMessage","validationErrorDetails","accountQueuedForDeletion","responseError","fetch","method","credentials","headers","Cookies","get","body","JSON","stringify","then","response","ok","addUserToDeletionQueue","failedSubmission","catch","error","status","title","value","feedback","length","onClose","renderSuccessModal","renderConfirmationModal","propTypes","PropTypes","func","defaultProps"],"mappings":"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","file":"StudentAccountDeletion.js","sourcesContent":["/* globals gettext */\n/* eslint-disable react/no-danger, import/prefer-default-export */\nimport React from 'react';\nimport { Button } from '@edx/paragon/static';\nimport StringUtils from 'edx-ui-toolkit/js/utils/string-utils';\nimport StudentAccountDeletionModal from './StudentAccountDeletionModal';\n\nexport class StudentAccountDeletion extends React.Component {\n  constructor(props) {\n    super(props);\n    this.closeDeletionModal = this.closeDeletionModal.bind(this);\n    this.loadDeletionModal = this.loadDeletionModal.bind(this);\n    this.state = { deletionModalOpen: false };\n  }\n\n  closeDeletionModal() {\n    this.setState({ deletionModalOpen: false });\n    this.modalTrigger.focus();\n  }\n\n  loadDeletionModal() {\n    this.setState({ deletionModalOpen: true });\n  }\n\n  render() {\n    const { deletionModalOpen } = this.state;\n    const loseAccessText = StringUtils.interpolate(\n      gettext('You may also lose access to verified certificates and other program credentials like MicroMasters certificates. If you want to make a copy of these for your records before proceeding with deletion, follow the instructions for {htmlStart}printing or downloading a certificate{htmlEnd}.'),\n      {\n        htmlStart: '<a href=\"http://edx.readthedocs.io/projects/edx-guide-for-students/en/latest/SFD_certificates.html#printing-a-certificate\" target=\"_blank\">',\n        htmlEnd: '</a>',\n      },\n    );\n\n    return (\n      <div className=\"account-deletion-details\">\n        <p className=\"account-settings-header-subtitle\">{ gettext('We’re sorry to see you go!') }</p>\n        <p className=\"account-settings-header-subtitle\">{ gettext('Please note: Deletion of your account and personal data is permanent and cannot be undone. EdX will not be able to recover your account or the data that is deleted.') }</p>\n        <p className=\"account-settings-header-subtitle\">{ gettext('Once your account is deleted, you cannot use it to take courses on the edX app, edx.org, or any other site hosted by edX. This includes access to edx.org from your employer’s or university’s system and access to private sites offered by MIT Open Learning, Wharton Executive Education, and Harvard Medical School.') }</p>\n        <p\n          className=\"account-settings-header-subtitle\"\n          dangerouslySetInnerHTML={{ __html: loseAccessText }}\n        />\n\n        <Button\n          id=\"delete-account-btn\"\n          className={['btn-outline-primary']}\n          label={gettext('Delete My Account')}\n          inputRef={(input) => { this.modalTrigger = input; }}\n          onClick={this.loadDeletionModal}\n        />\n        {deletionModalOpen && <StudentAccountDeletionModal onClose={this.closeDeletionModal} />}\n      </div>\n    );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lms/static/js/student_account/components/StudentAccountDeletion.jsx","/* globals gettext */\n/* eslint-disable react/no-danger */\nimport React from 'react';\nimport 'whatwg-fetch';\nimport PropTypes from 'prop-types';\nimport Cookies from 'js-cookie';\nimport { Button, Modal, Icon, InputText, StatusAlert } from '@edx/paragon/static';\nimport StringUtils from 'edx-ui-toolkit/js/utils/string-utils';\n\nclass StudentAccountDeletionConfirmationModal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.deleteAccount = this.deleteAccount.bind(this);\n    this.handlePasswordInputChange = this.handlePasswordInputChange.bind(this);\n    this.passwordFieldValidation = this.passwordFieldValidation.bind(this);\n    this.state = {\n      password: '',\n      passwordSubmitted: false,\n      passwordValid: true,\n      validationMessage: '',\n      validationErrorDetails: '',\n      accountQueuedForDeletion: false,\n      responseError: false,\n    };\n  }\n\n  addUserToDeletionQueue() {\n    // TODO: Add API call to add user to account deletion queue\n\n    this.setState({\n      accountQueuedForDeletion: true,\n      responseError: false,\n      passwordSubmitted: false,\n      validationMessage: '',\n      validationErrorDetails: '',\n    });\n  }\n\n  deleteAccount() {\n    const { password } = this.state;\n\n    this.setState({ passwordSubmitted: true });\n\n    fetch('/accounts/verify_password', {\n      method: 'POST',\n      credentials: 'same-origin',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'X-CSRFToken': Cookies.get('csrftoken'),\n      },\n      body: JSON.stringify({ password }),\n    }).then((response) => {\n      if (response.ok) {\n        return this.addUserToDeletionQueue();\n      }\n      return this.failedSubmission(response);\n    }).catch(error => this.failedSubmission(error));\n  }\n\n  failedSubmission(error) {\n    const { status } = error;\n    const title = status === 403 ? gettext('Password is incorrect') : gettext('Unable to delete account');\n    const body = status === 403 ? gettext('Please re-enter your password.') : gettext('Sorry, there was an error trying to process your request. Please try again later.');\n\n    this.setState({\n      passwordSubmitted: false,\n      responseError: true,\n      passwordValid: false,\n      validationMessage: title,\n      validationErrorDetails: body,\n    });\n  }\n\n  handlePasswordInputChange(value) {\n    this.setState({ password: value });\n  }\n\n  passwordFieldValidation(value) {\n    let feedback = { passwordValid: true };\n\n    if (value.length < 1) {\n      feedback = {\n        passwordValid: false,\n        validationMessage: gettext('A Password is required'),\n        validationErrorDetails: '',\n      };\n    }\n\n    this.setState(feedback);\n  }\n\n  renderConfirmationModal() {\n    const {\n      passwordValid,\n      password,\n      passwordSubmitted,\n      responseError,\n      validationErrorDetails,\n      validationMessage,\n    } = this.state;\n    const { onClose } = this.props;\n    const loseAccessText = StringUtils.interpolate(\n      gettext('You may also lose access to verified certificates and other program credentials like MicroMasters certificates. If you want to make a copy of these for your records before proceeding with deletion, follow the instructions for {htmlStart}printing or downloading a certificate{htmlEnd}.'),\n      {\n        htmlStart: '<a href=\"http://edx.readthedocs.io/projects/edx-guide-for-students/en/latest/SFD_certificates.html#printing-a-certificate\" target=\"_blank\">',\n        htmlEnd: '</a>',\n      },\n    );\n\n    return (\n      <div className=\"delete-confirmation-wrapper\">\n        <Modal\n          title={gettext('Are you sure?')}\n          renderHeaderCloseButton={false}\n          onClose={onClose}\n          aria-live=\"polite\"\n          open\n          body={(\n            <div>\n              {responseError &&\n                <StatusAlert\n                  dialog={(\n                    <div className=\"modal-alert\">\n                      <div className=\"icon-wrapper\">\n                        <Icon id=\"delete-confirmation-body-error-icon\" className={['fa', 'fa-exclamation-circle']} />\n                      </div>\n                      <div className=\"alert-content\">\n                        <h3 className=\"alert-title\">{ validationMessage }</h3>\n                        <p>{ validationErrorDetails }</p>\n                      </div>\n                    </div>\n                  )}\n                  alertType=\"danger\"\n                  dismissible={false}\n                  open\n                />\n              }\n\n              <StatusAlert\n                dialog={(\n                  <div className=\"modal-alert\">\n                    <div className=\"icon-wrapper\">\n                      <Icon id=\"delete-confirmation-body-warning-icon\" className={['fa', 'fa-exclamation-triangle']} />\n                    </div>\n                    <div className=\"alert-content\">\n                      <h3 className=\"alert-title\">{ gettext('You have selected “Delete my account.” Deletion of your account and personal data is permanent and cannot be undone. EdX will not be able to recover your account or the data that is deleted.') }</h3>\n                      <p>{ gettext('If you proceed, you will be unable to use this account to take courses on the edX app, edx.org, or any other site hosted by edX. This includes access to edx.org from your employer’s or university’s system and access to private sites offered by MIT Open Learning, Wharton Executive Education, and Harvard Medical School.') }</p>\n                      <p dangerouslySetInnerHTML={{ __html: loseAccessText }} />\n                    </div>\n                  </div>\n                )}\n                dismissible={false}\n                open\n              />\n              <p className=\"next-steps\">{ gettext('If you still wish to continue and delete your account, please enter your account password:') }</p>\n              <InputText\n                name=\"confirm-password\"\n                label=\"Password\"\n                type=\"password\"\n                className={['confirm-password-input']}\n                onBlur={this.passwordFieldValidation}\n                isValid={passwordValid}\n                validationMessage={validationMessage}\n                onChange={this.handlePasswordInputChange}\n                autoComplete=\"new-password\"\n                themes={['danger']}\n              />\n            </div>\n          )}\n          closeText={gettext('Cancel')}\n          buttons={[\n            <Button\n              label={gettext('Yes, Delete')}\n              onClick={this.deleteAccount}\n              disabled={password.length === 0 || passwordSubmitted}\n            />,\n          ]}\n        />\n      </div>\n    );\n  }\n\n  renderSuccessModal() {\n    const { onClose } = this.props;\n\n    return (\n      <div className=\"delete-success-wrapper\">\n        <Modal\n          title={gettext('We\\'re sorry to see you go! Your account will be deleted shortly.')}\n          renderHeaderCloseButton={false}\n          body={gettext('Account deletion, including removal from email lists, may take a few weeks to fully process through our system. If you want to opt-out of emails before then, please unsubscribe from the footer of any email.')}\n          onClose={onClose}\n          aria-live=\"polite\"\n          open\n        />\n      </div>\n    );\n  }\n\n  render() {\n    const { accountQueuedForDeletion } = this.state;\n\n    return accountQueuedForDeletion ? this.renderSuccessModal() : this.renderConfirmationModal();\n  }\n}\n\nStudentAccountDeletionConfirmationModal.propTypes = {\n  onClose: PropTypes.func,\n};\n\nStudentAccountDeletionConfirmationModal.defaultProps = {\n  onClose: () => {},\n};\n\nexport default StudentAccountDeletionConfirmationModal;\n\n\n\n// WEBPACK FOOTER //\n// ./lms/static/js/student_account/components/StudentAccountDeletionModal.jsx"],"sourceRoot":""}