{"version":3,"sources":["webpack:///./cms/static/js/features/import/factories/import.js","webpack:///./cms/static/js/features/import/views/import.js","webpack:///./common/static/js/vendor/jQuery-File-Upload/js/jquery.fileupload.js","webpack:///external \"jQuery\"?0cb8*******","webpack:///external \"Backbone\"?709d****","webpack:///external \"_\"?b3b9****","webpack:///external \"gettext\"?8b52*"],"names":["domReady","Import","$","gettext","feedbackUrl","library","dbError","$bar","$fill","$submitBtn","$chooseBtn","defaults","unloading","previousImport","storedImport","file","onComplete","hide","find","text","end","show","showImportSubmit","filepath","val","msg","substr","length","replace","window","on","name","completed","resume","then","fileupload","dataType","type","maxChunkSize","autoUpload","add","e","data","reset","unbind","files","match","click","event","preventDefault","start","submit","complete","result","textStatus","xhr","serverMsg","errMsg","stage","status","parseJSON","responseText","err","hasOwnProperty","ErrMsg","Math","abs","Stage","cancel","off","alert","progressall","percentInt","loaded","total","percentVal","parseInt","doneAt","navigator","userAgent","toLowerCase","indexOf","setTimeout","pollStatus","width","sequentialUploads","notifyOnError","bind","_","moment","HtmlUtils","COOKIE_NAME","STAGE","UPLOADING","UNPACKING","VERIFYING","UPDATING","SUCCESS","STATE","READY","IN_PROGRESS","ERROR","current","state","deferred","url","timeout","id","delay","$dom","stages","children","successStage","wrapper","CourseImport","destroyEventListeners","displayFeedbackList","removeClass","initEventListeners","storeImport","cookie","JSON","stringify","date","valueOf","path","location","pathname","updateFeedbackList","currStageMsg","$checkmark","$curr","$prev","$next","stageMsg","successUnix","time","completeStage","addClass","errorStage","hasClass","joinHtml","HTML","after","ensureHtml","toString","resetStage","remove","map","slice","eq","utc","format","error","clearTimeout","resolve","success","getJSON","ImportStatus","Deferred","promise","fileName","fileUrl","parse","factory","define","jQuery","support","fileInput","RegExp","test","prop","xhrFileUpload","XMLHttpRequestUpload","FileReader","xhrFormDataFileUpload","FormData","blobSlice","Blob","prototype","webkitSlice","mozSlice","widget","options","dropZone","document","pasteZone","undefined","replaceFileInput","paramName","singleFileUploads","limitMultiFileUploads","limitConcurrentUploads","forceIframeTransport","redirect","redirectParamName","postMessage","multipart","uploadedBytes","recalculateProgress","progressInterval","bitrateInterval","messages","i18n","message","context","each","key","value","formData","form","serializeArray","process","done","processData","contentType","cache","_specialOptions","_blobSlice","apply","arguments","_BitrateTimer","timestamp","Date","now","getTime","bitrate","getBitrate","interval","timeDiff","_isXHRUpload","_getFormData","isArray","push","_getTotal","index","size","_initProgressObject","obj","progress","_progress","extend","_initResponseObject","_response","_onProgress","lengthComputable","_time","floor","chunkSize","_bitrateTimer","_trigger","_initProgressListener","that","ajaxSettings","upload","oe","originalEvent","_isInstanceOf","Object","call","_initXHRData","headers","contentRange","blob","encodeURI","field","append","_initIframeSettings","targetHost","host","_initDataSettings","_chunkedUpload","_getParamName","input","i","_initFormSettings","href","toUpperCase","formAcceptCharset","attr","_getAJAXSettings","_getDeferredState","isResolved","isRejected","_enhancePromise","fail","always","_getXHRPromise","resolveOrReject","args","dfd","resolveWith","rejectWith","abort","_addConvenienceMethods","getPromise","resolveFunc","rejectFunc","_processQueue","pipe","jqXHR","_onSend","response","_getUploadedBytes","range","getResponseHeader","parts","split","upperBytesPos","testOnly","fs","ub","mcs","o","currentLoaded","ajax","Event","errorThrown","_beforeSend","_active","_onDone","_onFail","_onAlways","jqXHRorResult","jqXHRorError","aborted","slot","send","_sending","nextSlot","_slots","shift","_sequence","_onAdd","limit","paramNameSet","paramNameSlice","fileSet","originalFiles","element","newData","_replaceFileInput","inputClone","clone","detach","cleanData","el","_handleFileTreeEntry","entry","errorHandler","dirReader","isFile","_file","relativePath","isDirectory","createReader","readEntries","entries","_handleFileTreeEntries","when","Array","concat","_getDroppedFiles","dataTransfer","items","webkitGetAsEntry","getAsEntry","item","getAsFile","makeArray","_getSingleFileInputFiles","fileSize","_getFileInputFiles","_onChange","target","_onPaste","clipboardData","_onDrop","_onDragOver","inArray","types","dropEffect","_initEventHandlers","_on","dragover","drop","paste","change","_destroyEventHandlers","_off","_setOption","reinit","_super","_initSpecialOptions","is","_getRegExp","str","modifiers","pop","join","_isRegExpOption","_initDataAttributes","cloneNode","_create","active","disabled","reject"],"mappings":"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","file":"Import.js","sourcesContent":["define([\n    'domReady',\n    '../views/import',\n    'jquery',\n    'gettext',\n    'jQuery-File-Upload/js/jquery.fileupload',\n    'jquery.cookie',\n    '../../../../cms/js/main'\n], function(domReady, Import, $, gettext) {\n    'use strict';\n\n    return {\n        Import: function(feedbackUrl, library) {\n            var dbError,\n                $bar = $('.progress-bar'),\n                $fill = $('.progress-fill'),\n                $submitBtn = $('.submit-button'),\n                $chooseBtn = $('.view-import .choose-file-button'),\n                defaults = [\n                    gettext('There was an error during the upload process.') + '\\n',\n                    gettext('There was an error while unpacking the file.') + '\\n',\n                    gettext('There was an error while verifying the file you submitted.') + '\\n',\n                    dbError + '\\n'\n                ],\n                unloading = false,\n                previousImport = Import.storedImport(),\n                file,\n                onComplete = function() {\n                    $bar.hide();\n                    $chooseBtn\n                        .find('.copy').text(gettext('Choose new file')).end()\n                        .show();\n                },\n                showImportSubmit = function() {\n                    var filepath = $(this).val(),\n                        msg;\n\n                    if (filepath.substr(filepath.length - 6, 6) === 'tar.gz') {\n                        $('.error-block').hide();\n                        $('.file-name').text($(this).val().replace('C:\\\\fakepath\\\\', ''));\n                        $('.file-name-block').show();\n                        $chooseBtn.hide();\n                        $submitBtn.show();\n                        $('.progress').show();\n                    } else {\n                        msg = gettext('File format not supported. Please upload a file with a {ext} extension.')\n                            .replace('{ext}', '<code>tar.gz</code>');\n\n                        $('.error-block').text(msg).show();\n                    }\n                };\n\n            if (library) {\n                dbError = gettext('There was an error while importing the new library to our database.');\n            } else {\n                dbError = gettext('There was an error while importing the new course to our database.');\n            }\n\n            $(window).on('beforeunload', function() { unloading = true; });\n\n            // Display the status of last file upload on page load\n            if (previousImport) {\n                $('.file-name-block')\n                    .find('.file-name')\n                    .text(previousImport.file.name)\n                    .end()\n                    .show();\n\n                if (previousImport.completed !== true) {\n                    $chooseBtn.hide();\n                }\n\n                Import.resume().then(onComplete);\n            }\n\n            $('#fileupload').fileupload({\n                dataType: 'json',\n                type: 'POST',\n                maxChunkSize: 20 * 1000000, // 20 MB\n                autoUpload: false,\n                add: function(e, data) {\n                    Import.reset();\n                    $submitBtn.unbind('click');\n\n                    file = data.files[0];\n\n                    if (file.name.match(/tar\\.gz$/)) {\n                        $submitBtn.click(function(event) {\n                            event.preventDefault();\n\n                            Import.start(\n                                file.name,\n                                feedbackUrl.replace('fillerName', file.name)\n                            ).then(onComplete);\n\n                            $submitBtn.hide();\n                            data.submit().complete(function(result, textStatus, xhr) {\n                                var serverMsg, errMsg, stage;\n                                if (xhr.status !== 200) {\n                                    try {\n                                        serverMsg = $.parseJSON(result.responseText) || {};\n                                    } catch (err) {\n                                        return;\n                                    }\n\n                                    errMsg = serverMsg.hasOwnProperty('ErrMsg') ? serverMsg.ErrMsg : '';\n\n                                    if (serverMsg.hasOwnProperty('Stage')) {\n                                        stage = Math.abs(serverMsg.Stage);\n                                        Import.cancel(defaults[stage] + errMsg, stage);\n                                    } else if (!unloading) {\n                                        // It could be that the user is simply refreshing the page\n                                        // so we need to be sure this is an actual error from the server\n                                        $(window).off('beforeunload.import');\n\n                                        Import.reset();\n                                        onComplete();\n\n                                        alert(gettext('Your import has failed.') + '\\n\\n' + errMsg);  // eslint-disable-line max-len, no-alert\n                                    }\n                                }\n                            });\n                        });\n                    } else {\n                        // Can't fix this lint error without major structural changes, which I'm not comfortable\n                        // doing given this file's test coverage\n                        data.files = [];  // eslint-disable-line no-param-reassign\n                    }\n                },\n\n                progressall: function(e, data) {\n                    var percentInt = data.loaded / data.total * 100,\n                        percentVal = parseInt(percentInt, 10) + '%',\n                        doneAt;\n                    // Firefox makes ProgressEvent.loaded equal ProgressEvent.total only\n                    // after receiving a response from the server (see Mozilla bug 637002),\n                    // so for Firefox we jump the gun a little.\n                    if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {\n                        doneAt = 95;\n                    } else {\n                        doneAt = 99;\n                    }\n                    if (percentInt >= doneAt) {\n                        $bar.hide();\n\n                        // Start feedback with delay so that current stage of\n                        // import properly updates in session\n                        setTimeout(function() { Import.pollStatus(); }, 3000);\n                    } else {\n                        $bar.show();\n                        $fill.width(percentVal).text(percentVal);\n                    }\n                },\n                sequentialUploads: true,\n                notifyOnError: false\n            });\n\n            domReady(function() {\n                // import form setup\n                $('.view-import .file-input').bind('change', showImportSubmit);\n                $('.view-import .choose-file-button, .view-import .choose-file-button-inline')\n                    .bind('click', function(e) {\n                        e.preventDefault();\n                        $('.view-import .file-input').click();\n                    });\n            });\n        }\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./cms/static/js/features/import/factories/import.js","/**\n * Course import-related js.\n */\ndefine(\n    ['jquery', 'underscore', 'gettext', 'moment', 'edx-ui-toolkit/js/utils/html-utils', 'jquery.cookie'],\n    function($, _, gettext, moment, HtmlUtils) {\n        'use strict';\n\n        /** ******** Private properties ****************************************/\n\n        var COOKIE_NAME = 'lastimportupload';\n\n        var STAGE = {\n            UPLOADING: 0,\n            UNPACKING: 1,\n            VERIFYING: 2,\n            UPDATING: 3,\n            SUCCESS: 4\n        };\n\n        var STATE = {\n            READY: 1,\n            IN_PROGRESS: 2,\n            SUCCESS: 3,\n            ERROR: 4\n        };\n\n        var current = {stage: 0, state: STATE.READY};\n        var deferred = null;\n        var file = {name: null, url: null};\n        var timeout = {id: null, delay: 1000};\n        var $dom = {\n            stages: $('ol.status-progress').children(),\n            successStage: $('.item-progresspoint-success'),\n            wrapper: $('div.wrapper-status')\n        };\n\n        var CourseImport;\n\n        /** ******** Private functions *****************************************/\n\n        /**\n         * Destroys any event listener Import might have needed\n         * during the process the import\n         *\n         */\n        var destroyEventListeners = function() {\n            $(window).off('beforeunload.import');\n        };\n\n        /**\n         * Makes Import feedback status list visible\n         *\n         */\n        var displayFeedbackList = function() {\n            $dom.wrapper.removeClass('is-hidden');\n        };\n\n        /**\n         * Initializes the event listeners\n         *\n         */\n        var initEventListeners = function() {\n            $(window).on('beforeunload.import', function() {  // eslint-disable-line consistent-return\n                if (current.stage < STAGE.UNPACKING) {\n                    return gettext('Your import is in progress; navigating away will abort it.');\n                }\n            });\n        };\n\n        /**\n         * Stores in a cookie the current import data\n         *\n         * @param {boolean} [completed=false] If the import has been completed or not\n         */\n        var storeImport = function(completed) {\n            $.cookie(COOKIE_NAME, JSON.stringify({\n                file: file,\n                date: moment().valueOf(),\n                completed: completed || false\n            }), {path: window.location.pathname});\n        };\n\n        /**\n         * Updates the Import feedback status list\n         *\n         * @param {string} [currStageMsg=''] The message to show on the\n         *   current stage (for now only in case of error)\n         */\n        var updateFeedbackList = function(currStageMsg) {\n            var $checkmark, $curr, $prev, $next;\n            var date, stageMsg, successUnix, time;\n\n            $checkmark = $dom.successStage.find('.icon');\n            stageMsg = currStageMsg || '';\n\n            function completeStage(stage) {\n                $(stage)\n                    .removeClass('is-not-started is-started')\n                    .addClass('is-complete');\n            }\n\n            function errorStage(stage) {\n                if (!$(stage).hasClass('has-error')) {\n                    stageMsg = HtmlUtils.joinHtml(\n                        HtmlUtils.HTML('<p class=\"copy error\">'),\n                        stageMsg,\n                        HtmlUtils.HTML('</p>')\n                    );\n                    $(stage)\n                        .removeClass('is-started')\n                        .addClass('has-error')\n                        .find('p.copy')\n                        .hide()\n                        .after(HtmlUtils.ensureHtml(stageMsg).toString());\n                }\n            }\n\n            function resetStage(stage) {\n                $(stage)\n                    .removeClass('is-complete is-started has-error')\n                    .addClass('is-not-started')\n                    .find('p.error')\n                    .remove()\n                    .end()\n                    .find('p.copy')\n                    .show();\n            }\n\n            switch (current.state) {\n            case STATE.READY:\n                _.map($dom.stages, resetStage);\n\n                break;\n\n            case STATE.IN_PROGRESS:\n                $prev = $dom.stages.slice(0, current.stage);\n                $curr = $dom.stages.eq(current.stage);\n\n                _.map($prev, completeStage);\n                $curr.removeClass('is-not-started').addClass('is-started');\n\n                break;\n\n            case STATE.SUCCESS:\n                successUnix = CourseImport.storedImport().date;\n                date = moment(successUnix).utc().format('MM/DD/YYYY');\n                time = moment(successUnix).utc().format('HH:mm');\n\n                _.map($dom.stages, completeStage);\n\n                $dom.successStage\n                        .find('.item-progresspoint-success-date')\n                        .text('(' + date + ' at ' + time + ' UTC)');\n\n                break;\n\n            case STATE.ERROR:\n                    // Make all stages up to, and including, the error stage 'complete'.\n                $prev = $dom.stages.slice(0, current.stage + 1);\n                $curr = $dom.stages.eq(current.stage);\n                $next = $dom.stages.slice(current.stage + 1);\n\n                _.map($prev, completeStage);\n                _.map($next, resetStage);\n                errorStage($curr);\n\n                break;\n\n            default:\n                break;\n            }\n\n            if (current.state === STATE.SUCCESS) {\n                $checkmark.removeClass('fa-square-o').addClass('fa-check-square-o');\n            } else {\n                $checkmark.removeClass('fa-check-square-o').addClass('fa-square-o');\n            }\n        };\n\n        /**\n         * Sets the Import in the \"error\" status.\n         *\n         * Immediately stops any further polling from the server.\n         * Displays the error message at the list element that corresponds\n         * to the stage where the error occurred.\n         *\n         * @param {string} msg Error message to display.\n         * @param {int} [stage=current.stage] Stage of import process at which error occurred.\n         */\n        var error = function(msg, stage) {\n            current.stage = Math.abs(stage || current.stage); // Could be negative\n            current.state = STATE.ERROR;\n\n            destroyEventListeners();\n            clearTimeout(timeout.id);\n            updateFeedbackList(msg);\n\n            deferred.resolve();\n        };\n\n        /**\n         * Sets the Import on the \"success\" status\n         *\n         * If it wasn't already, marks the stored import as \"completed\",\n         * and updates its date timestamp\n         */\n        var success = function() {\n            current.state = STATE.SUCCESS;\n\n            if (CourseImport.storedImport().completed !== true) {\n                storeImport(true);\n            }\n\n            destroyEventListeners();\n            updateFeedbackList();\n\n            deferred.resolve();\n        };\n\n        /** ******** Public functions ******************************************/\n\n        CourseImport = {\n\n            /**\n             * Cancels the import and sets the Object to the error state\n             *\n             * @param {string} msg Error message to display.\n             * @param {int} stage Stage of import process at which error occurred.\n             */\n            cancel: function(msg, stage) {\n                error(msg, stage);\n            },\n\n            /**\n             * Entry point for server feedback\n             *\n             * Checks for import status updates every `timeout` milliseconds,\n             * and updates the page accordingly.\n             *\n             * @param {int} [stage=0] Starting stage.\n             */\n            pollStatus: function(stage) {\n                if (current.state !== STATE.IN_PROGRESS) {\n                    return;\n                }\n\n                current.stage = stage || STAGE.UPLOADING;\n\n                if (current.stage === STAGE.SUCCESS) {\n                    success();\n                } else if (current.stage < STAGE.UPLOADING) { // Failed\n                    error(gettext('Error importing course'));\n                } else { // In progress\n                    updateFeedbackList();\n\n                    $.getJSON(file.url, function(data) {\n                        timeout.id = setTimeout(function() {\n                            this.pollStatus(data.ImportStatus);\n                        }.bind(this), timeout.delay);\n                    }.bind(this));\n                }\n            },\n\n            /**\n             * Resets the Import internally and visually\n             *\n             */\n            reset: function() {\n                current.stage = STAGE.UPLOADING;\n                current.state = STATE.READY;\n\n                clearTimeout(timeout.id);\n                updateFeedbackList();\n            },\n\n            /**\n             * Show last import status from server and start sending requests\n             * to the server for status updates\n             *\n             * @return {jQuery promise}\n             */\n            resume: function() {\n                deferred = $.Deferred();\n                file = this.storedImport().file;\n\n                $.getJSON(file.url, function(data) {\n                    current.stage = data.ImportStatus;\n\n                    displayFeedbackList();\n\n                    if (current.stage !== STAGE.UPLOADING) {\n                        current.state = STATE.IN_PROGRESS;\n\n                        this.pollStatus(current.stage);\n                    } else {\n                        // An import in the upload stage cannot be resumed\n                        error(gettext('There was an error with the upload'));\n                    }\n                }.bind(this));\n\n                return deferred.promise();\n            },\n\n            /**\n             * Starts the importing process.\n             * Makes status list visible and starts showing upload progress.\n             *\n             * @param {string} fileName The name of the file to import\n             * @param {string} fileUrl The full URL to use to query the server\n             *     about the import status\n             * @return {jQuery promise}\n             */\n            start: function(fileName, fileUrl) {\n                current.state = STATE.IN_PROGRESS;\n                deferred = $.Deferred();\n\n                file.name = fileName;\n                file.url = fileUrl;\n\n                initEventListeners();\n                storeImport();\n                displayFeedbackList();\n                updateFeedbackList();\n\n                return deferred.promise();\n            },\n\n            /**\n             * Fetches the previous stored import\n             *\n             * @return {JSON} the data of the previous import\n             */\n            storedImport: function() {\n                return JSON.parse($.cookie(COOKIE_NAME));\n            }\n        };\n\n        return CourseImport;\n    });\n\n\n\n// WEBPACK FOOTER //\n// ./cms/static/js/features/import/views/import.js","/*\n * jQuery File Upload Plugin 5.32.2\n * https://github.com/blueimp/jQuery-File-Upload\n *\n * Copyright 2010, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * http://www.opensource.org/licenses/MIT\n */\n\n/*jslint nomen: true, unparam: true, regexp: true */\n/*global define, window, document, location, File, Blob, FormData */\n\n(function (factory) {\n    'use strict';\n    if (typeof define === 'function' && define.amd) {\n        // Register as an anonymous AMD module:\n        define([\n            'jquery',\n            'jquery.ui'\n        ], factory);\n    } else {\n        // Browser globals:\n        factory(window.jQuery);\n    }\n}(function ($) {\n    'use strict';\n\n    // Detect file input support, based on\n    // http://viljamis.com/blog/2012/file-upload-support-on-mobile/\n    $.support.fileInput = !(new RegExp(\n        // Handle devices which give false positives for the feature detection:\n        '(Android (1\\\\.[0156]|2\\\\.[01]))' +\n            '|(Windows Phone (OS 7|8\\\\.0))|(XBLWP)|(ZuneWP)|(WPDesktop)' +\n            '|(w(eb)?OSBrowser)|(webOS)' +\n            '|(Kindle/(1\\\\.0|2\\\\.[05]|3\\\\.0))'\n    ).test(window.navigator.userAgent) ||\n        // Feature detection for all other devices:\n        $('<input type=\"file\">').prop('disabled'));\n\n    // The FileReader API is not actually used, but works as feature detection,\n    // as e.g. Safari supports XHR file uploads via the FormData API,\n    // but not non-multipart XHR file uploads:\n    $.support.xhrFileUpload = !!(window.XMLHttpRequestUpload && window.FileReader);\n    $.support.xhrFormDataFileUpload = !!window.FormData;\n\n    // Detect support for Blob slicing (required for chunked uploads):\n    $.support.blobSlice = window.Blob && (Blob.prototype.slice ||\n        Blob.prototype.webkitSlice || Blob.prototype.mozSlice);\n\n    // The fileupload widget listens for change events on file input fields defined\n    // via fileInput setting and paste or drop events of the given dropZone.\n    // In addition to the default jQuery Widget methods, the fileupload widget\n    // exposes the \"add\" and \"send\" methods, to add or directly send files using\n    // the fileupload API.\n    // By default, files added via file input selection, paste, drag & drop or\n    // \"add\" method are uploaded immediately, but it is possible to override\n    // the \"add\" callback option to queue file uploads.\n    $.widget('blueimp.fileupload', {\n\n        options: {\n            // The drop target element(s), by the default the complete document.\n            // Set to null to disable drag & drop support:\n            dropZone: $(document),\n            // The paste target element(s), by the default the complete document.\n            // Set to null to disable paste support:\n            pasteZone: $(document),\n            // The file input field(s), that are listened to for change events.\n            // If undefined, it is set to the file input fields inside\n            // of the widget element on plugin initialization.\n            // Set to null to disable the change listener.\n            fileInput: undefined,\n            // By default, the file input field is replaced with a clone after\n            // each input field change event. This is required for iframe transport\n            // queues and allows change events to be fired for the same file\n            // selection, but can be disabled by setting the following option to false:\n            replaceFileInput: true,\n            // The parameter name for the file form data (the request argument name).\n            // If undefined or empty, the name property of the file input field is\n            // used, or \"files[]\" if the file input name property is also empty,\n            // can be a string or an array of strings:\n            paramName: undefined,\n            // By default, each file of a selection is uploaded using an individual\n            // request for XHR type uploads. Set to false to upload file\n            // selections in one request each:\n            singleFileUploads: true,\n            // To limit the number of files uploaded with one XHR request,\n            // set the following option to an integer greater than 0:\n            limitMultiFileUploads: undefined,\n            // Set the following option to true to issue all file upload requests\n            // in a sequential order:\n            sequentialUploads: false,\n            // To limit the number of concurrent uploads,\n            // set the following option to an integer greater than 0:\n            limitConcurrentUploads: undefined,\n            // Set the following option to true to force iframe transport uploads:\n            forceIframeTransport: false,\n            // Set the following option to the location of a redirect url on the\n            // origin server, for cross-domain iframe transport uploads:\n            redirect: undefined,\n            // The parameter name for the redirect url, sent as part of the form\n            // data and set to 'redirect' if this option is empty:\n            redirectParamName: undefined,\n            // Set the following option to the location of a postMessage window,\n            // to enable postMessage transport uploads:\n            postMessage: undefined,\n            // By default, XHR file uploads are sent as multipart/form-data.\n            // The iframe transport is always using multipart/form-data.\n            // Set to false to enable non-multipart XHR uploads:\n            multipart: true,\n            // To upload large files in smaller chunks, set the following option\n            // to a preferred maximum chunk size. If set to 0, null or undefined,\n            // or the browser does not support the required Blob API, files will\n            // be uploaded as a whole.\n            maxChunkSize: undefined,\n            // When a non-multipart upload or a chunked multipart upload has been\n            // aborted, this option can be used to resume the upload by setting\n            // it to the size of the already uploaded bytes. This option is most\n            // useful when modifying the options object inside of the \"add\" or\n            // \"send\" callbacks, as the options are cloned for each file upload.\n            uploadedBytes: undefined,\n            // By default, failed (abort or error) file uploads are removed from the\n            // global progress calculation. Set the following option to false to\n            // prevent recalculating the global progress data:\n            recalculateProgress: true,\n            // Interval in milliseconds to calculate and trigger progress events:\n            progressInterval: 100,\n            // Interval in milliseconds to calculate progress bitrate:\n            bitrateInterval: 500,\n            // By default, uploads are started automatically when adding files:\n            autoUpload: true,\n\n            // Error and info messages:\n            messages: {\n                uploadedBytes: 'Uploaded bytes exceed file size'\n            },\n\n            // Translation function, gets the message key to be translated\n            // and an object with context specific data as arguments:\n            i18n: function (message, context) {\n                message = this.messages[message] || message.toString();\n                if (context) {\n                    $.each(context, function (key, value) {\n                        message = message.replace('{' + key + '}', value);\n                    });\n                }\n                return message;\n            },\n\n            // Additional form data to be sent along with the file uploads can be set\n            // using this option, which accepts an array of objects with name and\n            // value properties, a function returning such an array, a FormData\n            // object (for XHR file uploads), or a simple object.\n            // The form of the first fileInput is given as parameter to the function:\n            formData: function (form) {\n                return form.serializeArray();\n            },\n\n            // The add callback is invoked as soon as files are added to the fileupload\n            // widget (via file input selection, drag & drop, paste or add API call).\n            // If the singleFileUploads option is enabled, this callback will be\n            // called once for each file in the selection for XHR file uploads, else\n            // once for each file selection.\n            //\n            // The upload starts when the submit method is invoked on the data parameter.\n            // The data object contains a files property holding the added files\n            // and allows you to override plugin options as well as define ajax settings.\n            //\n            // Listeners for this callback can also be bound the following way:\n            // .bind('fileuploadadd', func);\n            //\n            // data.submit() returns a Promise object and allows to attach additional\n            // handlers using jQuery's Deferred callbacks:\n            // data.submit().done(func).fail(func).always(func);\n            add: function (e, data) {\n                if (data.autoUpload || (data.autoUpload !== false &&\n                        $(this).fileupload('option', 'autoUpload'))) {\n                    data.process().done(function () {\n                        data.submit();\n                    });\n                }\n            },\n\n            // Other callbacks:\n\n            // Callback for the submit event of each file upload:\n            // submit: function (e, data) {}, // .bind('fileuploadsubmit', func);\n\n            // Callback for the start of each file upload request:\n            // send: function (e, data) {}, // .bind('fileuploadsend', func);\n\n            // Callback for successful uploads:\n            // done: function (e, data) {}, // .bind('fileuploaddone', func);\n\n            // Callback for failed (abort or error) uploads:\n            // fail: function (e, data) {}, // .bind('fileuploadfail', func);\n\n            // Callback for completed (success, abort or error) requests:\n            // always: function (e, data) {}, // .bind('fileuploadalways', func);\n\n            // Callback for upload progress events:\n            // progress: function (e, data) {}, // .bind('fileuploadprogress', func);\n\n            // Callback for global upload progress events:\n            // progressall: function (e, data) {}, // .bind('fileuploadprogressall', func);\n\n            // Callback for uploads start, equivalent to the global ajaxStart event:\n            // start: function (e) {}, // .bind('fileuploadstart', func);\n\n            // Callback for uploads stop, equivalent to the global ajaxStop event:\n            // stop: function (e) {}, // .bind('fileuploadstop', func);\n\n            // Callback for change events of the fileInput(s):\n            // change: function (e, data) {}, // .bind('fileuploadchange', func);\n\n            // Callback for paste events to the pasteZone(s):\n            // paste: function (e, data) {}, // .bind('fileuploadpaste', func);\n\n            // Callback for drop events of the dropZone(s):\n            // drop: function (e, data) {}, // .bind('fileuploaddrop', func);\n\n            // Callback for dragover events of the dropZone(s):\n            // dragover: function (e) {}, // .bind('fileuploaddragover', func);\n\n            // Callback for the start of each chunk upload request:\n            // chunksend: function (e, data) {}, // .bind('fileuploadchunksend', func);\n\n            // Callback for successful chunk uploads:\n            // chunkdone: function (e, data) {}, // .bind('fileuploadchunkdone', func);\n\n            // Callback for failed (abort or error) chunk uploads:\n            // chunkfail: function (e, data) {}, // .bind('fileuploadchunkfail', func);\n\n            // Callback for completed (success, abort or error) chunk upload requests:\n            // chunkalways: function (e, data) {}, // .bind('fileuploadchunkalways', func);\n\n            // The plugin options are used as settings object for the ajax calls.\n            // The following are jQuery ajax settings required for the file uploads:\n            processData: false,\n            contentType: false,\n            cache: false\n        },\n\n        // A list of options that require reinitializing event listeners and/or\n        // special initialization code:\n        _specialOptions: [\n            'fileInput',\n            'dropZone',\n            'pasteZone',\n            'multipart',\n            'forceIframeTransport'\n        ],\n\n        _blobSlice: $.support.blobSlice && function () {\n            var slice = this.slice || this.webkitSlice || this.mozSlice;\n            return slice.apply(this, arguments);\n        },\n\n        _BitrateTimer: function () {\n            this.timestamp = ((Date.now) ? Date.now() : (new Date()).getTime());\n            this.loaded = 0;\n            this.bitrate = 0;\n            this.getBitrate = function (now, loaded, interval) {\n                var timeDiff = now - this.timestamp;\n                if (!this.bitrate || !interval || timeDiff > interval) {\n                    this.bitrate = (loaded - this.loaded) * (1000 / timeDiff) * 8;\n                    this.loaded = loaded;\n                    this.timestamp = now;\n                }\n                return this.bitrate;\n            };\n        },\n\n        _isXHRUpload: function (options) {\n            return !options.forceIframeTransport &&\n                ((!options.multipart && $.support.xhrFileUpload) ||\n                $.support.xhrFormDataFileUpload);\n        },\n\n        _getFormData: function (options) {\n            var formData;\n            if (typeof options.formData === 'function') {\n                return options.formData(options.form);\n            }\n            if ($.isArray(options.formData)) {\n                return options.formData;\n            }\n            if ($.type(options.formData) === 'object') {\n                formData = [];\n                $.each(options.formData, function (name, value) {\n                    formData.push({name: name, value: value});\n                });\n                return formData;\n            }\n            return [];\n        },\n\n        _getTotal: function (files) {\n            var total = 0;\n            $.each(files, function (index, file) {\n                total += file.size || 1;\n            });\n            return total;\n        },\n\n        _initProgressObject: function (obj) {\n            var progress = {\n                loaded: 0,\n                total: 0,\n                bitrate: 0\n            };\n            if (obj._progress) {\n                $.extend(obj._progress, progress);\n            } else {\n                obj._progress = progress;\n            }\n        },\n\n        _initResponseObject: function (obj) {\n            var prop;\n            if (obj._response) {\n                for (prop in obj._response) {\n                    if (obj._response.hasOwnProperty(prop)) {\n                        delete obj._response[prop];\n                    }\n                }\n            } else {\n                obj._response = {};\n            }\n        },\n\n        _onProgress: function (e, data) {\n            if (e.lengthComputable) {\n                var now = ((Date.now) ? Date.now() : (new Date()).getTime()),\n                    loaded;\n                if (data._time && data.progressInterval &&\n                        (now - data._time < data.progressInterval) &&\n                        e.loaded !== e.total) {\n                    return;\n                }\n                data._time = now;\n                loaded = Math.floor(\n                    e.loaded / e.total * (data.chunkSize || data._progress.total)\n                ) + (data.uploadedBytes || 0);\n                // Add the difference from the previously loaded state\n                // to the global loaded counter:\n                this._progress.loaded += (loaded - data._progress.loaded);\n                this._progress.bitrate = this._bitrateTimer.getBitrate(\n                    now,\n                    this._progress.loaded,\n                    data.bitrateInterval\n                );\n                data._progress.loaded = data.loaded = loaded;\n                data._progress.bitrate = data.bitrate = data._bitrateTimer.getBitrate(\n                    now,\n                    loaded,\n                    data.bitrateInterval\n                );\n                // Trigger a custom progress event with a total data property set\n                // to the file size(s) of the current upload and a loaded data\n                // property calculated accordingly:\n                this._trigger('progress', e, data);\n                // Trigger a global progress event for all current file uploads,\n                // including ajax calls queued for sequential file uploads:\n                this._trigger('progressall', e, this._progress);\n            }\n        },\n\n        _initProgressListener: function (options) {\n            var that = this,\n                xhr = options.xhr ? options.xhr() : $.ajaxSettings.xhr();\n            // Accesss to the native XHR object is required to add event listeners\n            // for the upload progress event:\n            if (xhr.upload) {\n                $(xhr.upload).bind('progress', function (e) {\n                    var oe = e.originalEvent;\n                    // Make sure the progress event properties get copied over:\n                    e.lengthComputable = oe.lengthComputable;\n                    e.loaded = oe.loaded;\n                    e.total = oe.total;\n                    that._onProgress(e, options);\n                });\n                options.xhr = function () {\n                    return xhr;\n                };\n            }\n        },\n\n        _isInstanceOf: function (type, obj) {\n            // Cross-frame instanceof check\n            return Object.prototype.toString.call(obj) === '[object ' + type + ']';\n        },\n\n        _initXHRData: function (options) {\n            var that = this,\n                formData,\n                file = options.files[0],\n                // Ignore non-multipart setting if not supported:\n                multipart = options.multipart || !$.support.xhrFileUpload,\n                paramName = options.paramName[0];\n            options.headers = options.headers || {};\n            if (options.contentRange) {\n                options.headers['Content-Range'] = options.contentRange;\n            }\n            if (!multipart || options.blob || !this._isInstanceOf('File', file)) {\n                options.headers['Content-Disposition'] = 'attachment; filename=\"' +\n                    encodeURI(file.name) + '\"';\n            }\n            if (!multipart) {\n                options.contentType = file.type;\n                options.data = options.blob || file;\n            } else if ($.support.xhrFormDataFileUpload) {\n                if (options.postMessage) {\n                    // window.postMessage does not allow sending FormData\n                    // objects, so we just add the File/Blob objects to\n                    // the formData array and let the postMessage window\n                    // create the FormData object out of this array:\n                    formData = this._getFormData(options);\n                    if (options.blob) {\n                        formData.push({\n                            name: paramName,\n                            value: options.blob\n                        });\n                    } else {\n                        $.each(options.files, function (index, file) {\n                            formData.push({\n                                name: options.paramName[index] || paramName,\n                                value: file\n                            });\n                        });\n                    }\n                } else {\n                    if (that._isInstanceOf('FormData', options.formData)) {\n                        formData = options.formData;\n                    } else {\n                        formData = new FormData();\n                        $.each(this._getFormData(options), function (index, field) {\n                            formData.append(field.name, field.value);\n                        });\n                    }\n                    if (options.blob) {\n                        formData.append(paramName, options.blob, file.name);\n                    } else {\n                        $.each(options.files, function (index, file) {\n                            // This check allows the tests to run with\n                            // dummy objects:\n                            if (that._isInstanceOf('File', file) ||\n                                    that._isInstanceOf('Blob', file)) {\n                                formData.append(\n                                    options.paramName[index] || paramName,\n                                    file,\n                                    file.name\n                                );\n                            }\n                        });\n                    }\n                }\n                options.data = formData;\n            }\n            // Blob reference is not needed anymore, free memory:\n            options.blob = null;\n        },\n\n        _initIframeSettings: function (options) {\n            var targetHost = $('<a></a>').prop('href', options.url).prop('host');\n            // Setting the dataType to iframe enables the iframe transport:\n            options.dataType = 'iframe ' + (options.dataType || '');\n            // The iframe transport accepts a serialized array as form data:\n            options.formData = this._getFormData(options);\n            // Add redirect url to form data on cross-domain uploads:\n            if (options.redirect && targetHost && targetHost !== location.host) {\n                options.formData.push({\n                    name: options.redirectParamName || 'redirect',\n                    value: options.redirect\n                });\n            }\n        },\n\n        _initDataSettings: function (options) {\n            if (this._isXHRUpload(options)) {\n                if (!this._chunkedUpload(options, true)) {\n                    if (!options.data) {\n                        this._initXHRData(options);\n                    }\n                    this._initProgressListener(options);\n                }\n                if (options.postMessage) {\n                    // Setting the dataType to postmessage enables the\n                    // postMessage transport:\n                    options.dataType = 'postmessage ' + (options.dataType || '');\n                }\n            } else {\n                this._initIframeSettings(options);\n            }\n        },\n\n        _getParamName: function (options) {\n            var fileInput = $(options.fileInput),\n                paramName = options.paramName;\n            if (!paramName) {\n                paramName = [];\n                fileInput.each(function () {\n                    var input = $(this),\n                        name = input.prop('name') || 'files[]',\n                        i = (input.prop('files') || [1]).length;\n                    while (i) {\n                        paramName.push(name);\n                        i -= 1;\n                    }\n                });\n                if (!paramName.length) {\n                    paramName = [fileInput.prop('name') || 'files[]'];\n                }\n            } else if (!$.isArray(paramName)) {\n                paramName = [paramName];\n            }\n            return paramName;\n        },\n\n        _initFormSettings: function (options) {\n            // Retrieve missing options from the input field and the\n            // associated form, if available:\n            if (!options.form || !options.form.length) {\n                options.form = $(options.fileInput.prop('form'));\n                // If the given file input doesn't have an associated form,\n                // use the default widget file input's form:\n                if (!options.form.length) {\n                    options.form = $(this.options.fileInput.prop('form'));\n                }\n            }\n            options.paramName = this._getParamName(options);\n            if (!options.url) {\n                options.url = options.form.prop('action') || location.href;\n            }\n            // The HTTP request method must be \"POST\" or \"PUT\":\n            options.type = (options.type || options.form.prop('method') || '')\n                .toUpperCase();\n            if (options.type !== 'POST' && options.type !== 'PUT' &&\n                    options.type !== 'PATCH') {\n                options.type = 'POST';\n            }\n            if (!options.formAcceptCharset) {\n                options.formAcceptCharset = options.form.attr('accept-charset');\n            }\n        },\n\n        _getAJAXSettings: function (data) {\n            var options = $.extend({}, this.options, data);\n            this._initFormSettings(options);\n            this._initDataSettings(options);\n            return options;\n        },\n\n        // jQuery 1.6 doesn't provide .state(),\n        // while jQuery 1.8+ removed .isRejected() and .isResolved():\n        _getDeferredState: function (deferred) {\n            if (deferred.state) {\n                return deferred.state();\n            }\n            if (deferred.isResolved()) {\n                return 'resolved';\n            }\n            if (deferred.isRejected()) {\n                return 'rejected';\n            }\n            return 'pending';\n        },\n\n        // Maps jqXHR callbacks to the equivalent\n        // methods of the given Promise object:\n        _enhancePromise: function (promise) {\n            promise.success = promise.done;\n            promise.error = promise.fail;\n            promise.complete = promise.always;\n            return promise;\n        },\n\n        // Creates and returns a Promise object enhanced with\n        // the jqXHR methods abort, success, error and complete:\n        _getXHRPromise: function (resolveOrReject, context, args) {\n            var dfd = $.Deferred(),\n                promise = dfd.promise();\n            context = context || this.options.context || promise;\n            if (resolveOrReject === true) {\n                dfd.resolveWith(context, args);\n            } else if (resolveOrReject === false) {\n                dfd.rejectWith(context, args);\n            }\n            promise.abort = dfd.promise;\n            return this._enhancePromise(promise);\n        },\n\n        // Adds convenience methods to the data callback argument:\n        _addConvenienceMethods: function (e, data) {\n            var that = this,\n                getPromise = function (data) {\n                    return $.Deferred().resolveWith(that, [data]).promise();\n                };\n            data.process = function (resolveFunc, rejectFunc) {\n                if (resolveFunc || rejectFunc) {\n                    data._processQueue = this._processQueue =\n                        (this._processQueue || getPromise(this))\n                            .pipe(resolveFunc, rejectFunc);\n                }\n                return this._processQueue || getPromise(this);\n            };\n            data.submit = function () {\n                if (this.state() !== 'pending') {\n                    data.jqXHR = this.jqXHR =\n                        (that._trigger('submit', e, this) !== false) &&\n                        that._onSend(e, this);\n                }\n                return this.jqXHR || that._getXHRPromise();\n            };\n            data.abort = function () {\n                if (this.jqXHR) {\n                    return this.jqXHR.abort();\n                }\n                return that._getXHRPromise();\n            };\n            data.state = function () {\n                if (this.jqXHR) {\n                    return that._getDeferredState(this.jqXHR);\n                }\n                if (this._processQueue) {\n                    return that._getDeferredState(this._processQueue);\n                }\n            };\n            data.progress = function () {\n                return this._progress;\n            };\n            data.response = function () {\n                return this._response;\n            };\n        },\n\n        // Parses the Range header from the server response\n        // and returns the uploaded bytes:\n        _getUploadedBytes: function (jqXHR) {\n            var range = jqXHR.getResponseHeader('Range'),\n                parts = range && range.split('-'),\n                upperBytesPos = parts && parts.length > 1 &&\n                    parseInt(parts[1], 10);\n            return upperBytesPos && upperBytesPos + 1;\n        },\n\n        // Uploads a file in multiple, sequential requests\n        // by splitting the file up in multiple blob chunks.\n        // If the second parameter is true, only tests if the file\n        // should be uploaded in chunks, but does not invoke any\n        // upload requests:\n        _chunkedUpload: function (options, testOnly) {\n            options.uploadedBytes = options.uploadedBytes || 0;\n            var that = this,\n                file = options.files[0],\n                fs = file.size,\n                ub = options.uploadedBytes,\n                mcs = options.maxChunkSize || fs,\n                slice = this._blobSlice,\n                dfd = $.Deferred(),\n                promise = dfd.promise(),\n                jqXHR,\n                upload;\n            if (!(this._isXHRUpload(options) && slice && (ub || mcs < fs)) ||\n                    options.data) {\n                return false;\n            }\n            if (testOnly) {\n                return true;\n            }\n            if (ub >= fs) {\n                file.error = options.i18n('uploadedBytes');\n                return this._getXHRPromise(\n                    false,\n                    options.context,\n                    [null, 'error', file.error]\n                );\n            }\n            // The chunk upload method:\n            upload = function () {\n                // Clone the options object for each chunk upload:\n                var o = $.extend({}, options),\n                    currentLoaded = o._progress.loaded;\n                o.blob = slice.call(\n                    file,\n                    ub,\n                    ub + mcs,\n                    file.type\n                );\n                // Store the current chunk size, as the blob itself\n                // will be dereferenced after data processing:\n                o.chunkSize = o.blob.size;\n                // Expose the chunk bytes position range:\n                o.contentRange = 'bytes ' + ub + '-' +\n                    (ub + o.chunkSize - 1) + '/' + fs;\n                // Process the upload data (the blob and potential form data):\n                that._initXHRData(o);\n                // Add progress listeners for this chunk upload:\n                that._initProgressListener(o);\n                jqXHR = ((that._trigger('chunksend', null, o) !== false && $.ajax(o)) ||\n                        that._getXHRPromise(false, o.context))\n                    .done(function (result, textStatus, jqXHR) {\n                        ub = that._getUploadedBytes(jqXHR) ||\n                            (ub + o.chunkSize);\n                        // Create a progress event if no final progress event\n                        // with loaded equaling total has been triggered\n                        // for this chunk:\n                        if (currentLoaded + o.chunkSize - o._progress.loaded) {\n                            that._onProgress($.Event('progress', {\n                                lengthComputable: true,\n                                loaded: ub - o.uploadedBytes,\n                                total: ub - o.uploadedBytes\n                            }), o);\n                        }\n                        options.uploadedBytes = o.uploadedBytes = ub;\n                        o.result = result;\n                        o.textStatus = textStatus;\n                        o.jqXHR = jqXHR;\n                        that._trigger('chunkdone', null, o);\n                        that._trigger('chunkalways', null, o);\n                        if (ub < fs) {\n                            // File upload not yet complete,\n                            // continue with the next chunk:\n                            upload();\n                        } else {\n                            dfd.resolveWith(\n                                o.context,\n                                [result, textStatus, jqXHR]\n                            );\n                        }\n                    })\n                    .fail(function (jqXHR, textStatus, errorThrown) {\n                        o.jqXHR = jqXHR;\n                        o.textStatus = textStatus;\n                        o.errorThrown = errorThrown;\n                        that._trigger('chunkfail', null, o);\n                        that._trigger('chunkalways', null, o);\n                        dfd.rejectWith(\n                            o.context,\n                            [jqXHR, textStatus, errorThrown]\n                        );\n                    });\n            };\n            this._enhancePromise(promise);\n            promise.abort = function () {\n                return jqXHR.abort();\n            };\n            upload();\n            return promise;\n        },\n\n        _beforeSend: function (e, data) {\n            if (this._active === 0) {\n                // the start callback is triggered when an upload starts\n                // and no other uploads are currently running,\n                // equivalent to the global ajaxStart event:\n                this._trigger('start');\n                // Set timer for global bitrate progress calculation:\n                this._bitrateTimer = new this._BitrateTimer();\n                // Reset the global progress values:\n                this._progress.loaded = this._progress.total = 0;\n                this._progress.bitrate = 0;\n            }\n            // Make sure the container objects for the .response() and\n            // .progress() methods on the data object are available\n            // and reset to their initial state:\n            this._initResponseObject(data);\n            this._initProgressObject(data);\n            data._progress.loaded = data.loaded = data.uploadedBytes || 0;\n            data._progress.total = data.total = this._getTotal(data.files) || 1;\n            data._progress.bitrate = data.bitrate = 0;\n            this._active += 1;\n            // Initialize the global progress values:\n            this._progress.loaded += data.loaded;\n            this._progress.total += data.total;\n        },\n\n        _onDone: function (result, textStatus, jqXHR, options) {\n            var total = options._progress.total,\n                response = options._response;\n            if (options._progress.loaded < total) {\n                // Create a progress event if no final progress event\n                // with loaded equaling total has been triggered:\n                this._onProgress($.Event('progress', {\n                    lengthComputable: true,\n                    loaded: total,\n                    total: total\n                }), options);\n            }\n            response.result = options.result = result;\n            response.textStatus = options.textStatus = textStatus;\n            response.jqXHR = options.jqXHR = jqXHR;\n            this._trigger('done', null, options);\n        },\n\n        _onFail: function (jqXHR, textStatus, errorThrown, options) {\n            var response = options._response;\n            if (options.recalculateProgress) {\n                // Remove the failed (error or abort) file upload from\n                // the global progress calculation:\n                this._progress.loaded -= options._progress.loaded;\n                this._progress.total -= options._progress.total;\n            }\n            response.jqXHR = options.jqXHR = jqXHR;\n            response.textStatus = options.textStatus = textStatus;\n            response.errorThrown = options.errorThrown = errorThrown;\n            this._trigger('fail', null, options);\n        },\n\n        _onAlways: function (jqXHRorResult, textStatus, jqXHRorError, options) {\n            // jqXHRorResult, textStatus and jqXHRorError are added to the\n            // options object via done and fail callbacks\n            this._trigger('always', null, options);\n        },\n\n        _onSend: function (e, data) {\n            if (!data.submit) {\n                this._addConvenienceMethods(e, data);\n            }\n            var that = this,\n                jqXHR,\n                aborted,\n                slot,\n                pipe,\n                options = that._getAJAXSettings(data),\n                send = function () {\n                    that._sending += 1;\n                    // Set timer for bitrate progress calculation:\n                    options._bitrateTimer = new that._BitrateTimer();\n                    jqXHR = jqXHR || (\n                        ((aborted || that._trigger('send', e, options) === false) &&\n                        that._getXHRPromise(false, options.context, aborted)) ||\n                        that._chunkedUpload(options) || $.ajax(options)\n                    ).done(function (result, textStatus, jqXHR) {\n                        that._onDone(result, textStatus, jqXHR, options);\n                    }).fail(function (jqXHR, textStatus, errorThrown) {\n                        that._onFail(jqXHR, textStatus, errorThrown, options);\n                    }).always(function (jqXHRorResult, textStatus, jqXHRorError) {\n                        that._onAlways(\n                            jqXHRorResult,\n                            textStatus,\n                            jqXHRorError,\n                            options\n                        );\n                        that._sending -= 1;\n                        that._active -= 1;\n                        if (options.limitConcurrentUploads &&\n                                options.limitConcurrentUploads > that._sending) {\n                            // Start the next queued upload,\n                            // that has not been aborted:\n                            var nextSlot = that._slots.shift();\n                            while (nextSlot) {\n                                if (that._getDeferredState(nextSlot) === 'pending') {\n                                    nextSlot.resolve();\n                                    break;\n                                }\n                                nextSlot = that._slots.shift();\n                            }\n                        }\n                        if (that._active === 0) {\n                            // The stop callback is triggered when all uploads have\n                            // been completed, equivalent to the global ajaxStop event:\n                            that._trigger('stop');\n                        }\n                    });\n                    return jqXHR;\n                };\n            this._beforeSend(e, options);\n            if (this.options.sequentialUploads ||\n                    (this.options.limitConcurrentUploads &&\n                    this.options.limitConcurrentUploads <= this._sending)) {\n                if (this.options.limitConcurrentUploads > 1) {\n                    slot = $.Deferred();\n                    this._slots.push(slot);\n                    pipe = slot.pipe(send);\n                } else {\n                    this._sequence = this._sequence.pipe(send, send);\n                    pipe = this._sequence;\n                }\n                // Return the piped Promise object, enhanced with an abort method,\n                // which is delegated to the jqXHR object of the current upload,\n                // and jqXHR callbacks mapped to the equivalent Promise methods:\n                pipe.abort = function () {\n                    aborted = [undefined, 'abort', 'abort'];\n                    if (!jqXHR) {\n                        if (slot) {\n                            slot.rejectWith(options.context, aborted);\n                        }\n                        return send();\n                    }\n                    return jqXHR.abort();\n                };\n                return this._enhancePromise(pipe);\n            }\n            return send();\n        },\n\n        _onAdd: function (e, data) {\n            var that = this,\n                result = true,\n                options = $.extend({}, this.options, data),\n                limit = options.limitMultiFileUploads,\n                paramName = this._getParamName(options),\n                paramNameSet,\n                paramNameSlice,\n                fileSet,\n                i;\n            if (!(options.singleFileUploads || limit) ||\n                    !this._isXHRUpload(options)) {\n                fileSet = [data.files];\n                paramNameSet = [paramName];\n            } else if (!options.singleFileUploads && limit) {\n                fileSet = [];\n                paramNameSet = [];\n                for (i = 0; i < data.files.length; i += limit) {\n                    fileSet.push(data.files.slice(i, i + limit));\n                    paramNameSlice = paramName.slice(i, i + limit);\n                    if (!paramNameSlice.length) {\n                        paramNameSlice = paramName;\n                    }\n                    paramNameSet.push(paramNameSlice);\n                }\n            } else {\n                paramNameSet = paramName;\n            }\n            data.originalFiles = data.files;\n            $.each(fileSet || data.files, function (index, element) {\n                var newData = $.extend({}, data);\n                newData.files = fileSet ? element : [element];\n                newData.paramName = paramNameSet[index];\n                that._initResponseObject(newData);\n                that._initProgressObject(newData);\n                that._addConvenienceMethods(e, newData);\n                result = that._trigger('add', e, newData);\n                return result;\n            });\n            return result;\n        },\n\n        _replaceFileInput: function (input) {\n            var inputClone = input.clone(true);\n            $('<form></form>').append(inputClone)[0].reset();\n            // Detaching allows to insert the fileInput on another form\n            // without loosing the file input value:\n            input.after(inputClone).detach();\n            // Avoid memory leaks with the detached file input:\n            $.cleanData(input.unbind('remove'));\n            // Replace the original file input element in the fileInput\n            // elements set with the clone, which has been copied including\n            // event handlers:\n            this.options.fileInput = this.options.fileInput.map(function (i, el) {\n                if (el === input[0]) {\n                    return inputClone[0];\n                }\n                return el;\n            });\n            // If the widget has been initialized on the file input itself,\n            // override this.element with the file input clone:\n            if (input[0] === this.element[0]) {\n                this.element = inputClone;\n            }\n        },\n\n        _handleFileTreeEntry: function (entry, path) {\n            var that = this,\n                dfd = $.Deferred(),\n                errorHandler = function (e) {\n                    if (e && !e.entry) {\n                        e.entry = entry;\n                    }\n                    // Since $.when returns immediately if one\n                    // Deferred is rejected, we use resolve instead.\n                    // This allows valid files and invalid items\n                    // to be returned together in one set:\n                    dfd.resolve([e]);\n                },\n                dirReader;\n            path = path || '';\n            if (entry.isFile) {\n                if (entry._file) {\n                    // Workaround for Chrome bug #149735\n                    entry._file.relativePath = path;\n                    dfd.resolve(entry._file);\n                } else {\n                    entry.file(function (file) {\n                        file.relativePath = path;\n                        dfd.resolve(file);\n                    }, errorHandler);\n                }\n            } else if (entry.isDirectory) {\n                dirReader = entry.createReader();\n                dirReader.readEntries(function (entries) {\n                    that._handleFileTreeEntries(\n                        entries,\n                        path + entry.name + '/'\n                    ).done(function (files) {\n                        dfd.resolve(files);\n                    }).fail(errorHandler);\n                }, errorHandler);\n            } else {\n                // Return an empy list for file system items\n                // other than files or directories:\n                dfd.resolve([]);\n            }\n            return dfd.promise();\n        },\n\n        _handleFileTreeEntries: function (entries, path) {\n            var that = this;\n            return $.when.apply(\n                $,\n                $.map(entries, function (entry) {\n                    return that._handleFileTreeEntry(entry, path);\n                })\n            ).pipe(function () {\n                return Array.prototype.concat.apply(\n                    [],\n                    arguments\n                );\n            });\n        },\n\n        _getDroppedFiles: function (dataTransfer) {\n            dataTransfer = dataTransfer || {};\n            var items = dataTransfer.items;\n            if (items && items.length && (items[0].webkitGetAsEntry ||\n                    items[0].getAsEntry)) {\n                return this._handleFileTreeEntries(\n                    $.map(items, function (item) {\n                        var entry;\n                        if (item.webkitGetAsEntry) {\n                            entry = item.webkitGetAsEntry();\n                            if (entry) {\n                                // Workaround for Chrome bug #149735:\n                                entry._file = item.getAsFile();\n                            }\n                            return entry;\n                        }\n                        return item.getAsEntry();\n                    })\n                );\n            }\n            return $.Deferred().resolve(\n                $.makeArray(dataTransfer.files)\n            ).promise();\n        },\n\n        _getSingleFileInputFiles: function (fileInput) {\n            fileInput = $(fileInput);\n            var entries = fileInput.prop('webkitEntries') ||\n                    fileInput.prop('entries'),\n                files,\n                value;\n            if (entries && entries.length) {\n                return this._handleFileTreeEntries(entries);\n            }\n            files = $.makeArray(fileInput.prop('files'));\n            if (!files.length) {\n                value = fileInput.prop('value');\n                if (!value) {\n                    return $.Deferred().resolve([]).promise();\n                }\n                // If the files property is not available, the browser does not\n                // support the File API and we add a pseudo File object with\n                // the input value as name with path information removed:\n                files = [{name: value.replace(/^.*\\\\/, '')}];\n            } else if (files[0].name === undefined && files[0].fileName) {\n                // File normalization for Safari 4 and Firefox 3:\n                $.each(files, function (index, file) {\n                    file.name = file.fileName;\n                    file.size = file.fileSize;\n                });\n            }\n            return $.Deferred().resolve(files).promise();\n        },\n\n        _getFileInputFiles: function (fileInput) {\n            if (!(fileInput instanceof $) || fileInput.length === 1) {\n                return this._getSingleFileInputFiles(fileInput);\n            }\n            return $.when.apply(\n                $,\n                $.map(fileInput, this._getSingleFileInputFiles)\n            ).pipe(function () {\n                return Array.prototype.concat.apply(\n                    [],\n                    arguments\n                );\n            });\n        },\n\n        _onChange: function (e) {\n            var that = this,\n                data = {\n                    fileInput: $(e.target),\n                    form: $(e.target.form)\n                };\n            this._getFileInputFiles(data.fileInput).always(function (files) {\n                data.files = files;\n                if (that.options.replaceFileInput) {\n                    that._replaceFileInput(data.fileInput);\n                }\n                if (that._trigger('change', e, data) !== false) {\n                    that._onAdd(e, data);\n                }\n            });\n        },\n\n        _onPaste: function (e) {\n            var items = e.originalEvent && e.originalEvent.clipboardData &&\n                    e.originalEvent.clipboardData.items,\n                data = {files: []};\n            if (items && items.length) {\n                $.each(items, function (index, item) {\n                    var file = item.getAsFile && item.getAsFile();\n                    if (file) {\n                        data.files.push(file);\n                    }\n                });\n                if (this._trigger('paste', e, data) === false ||\n                        this._onAdd(e, data) === false) {\n                    return false;\n                }\n            }\n        },\n\n        _onDrop: function (e) {\n            e.dataTransfer = e.originalEvent && e.originalEvent.dataTransfer;\n            var that = this,\n                dataTransfer = e.dataTransfer,\n                data = {};\n            if (dataTransfer && dataTransfer.files && dataTransfer.files.length) {\n                e.preventDefault();\n                this._getDroppedFiles(dataTransfer).always(function (files) {\n                    data.files = files;\n                    if (that._trigger('drop', e, data) !== false) {\n                        that._onAdd(e, data);\n                    }\n                });\n            }\n        },\n\n        _onDragOver: function (e) {\n            e.dataTransfer = e.originalEvent && e.originalEvent.dataTransfer;\n            var dataTransfer = e.dataTransfer;\n            if (dataTransfer) {\n                if (this._trigger('dragover', e) === false) {\n                    return false;\n                }\n                if ($.inArray('Files', dataTransfer.types) !== -1) {\n                    dataTransfer.dropEffect = 'copy';\n                    e.preventDefault();\n                }\n            }\n        },\n\n        _initEventHandlers: function () {\n            if (this._isXHRUpload(this.options)) {\n                this._on(this.options.dropZone, {\n                    dragover: this._onDragOver,\n                    drop: this._onDrop\n                });\n                this._on(this.options.pasteZone, {\n                    paste: this._onPaste\n                });\n            }\n            if ($.support.fileInput) {\n                this._on(this.options.fileInput, {\n                    change: this._onChange\n                });\n            }\n        },\n\n        _destroyEventHandlers: function () {\n            this._off(this.options.dropZone, 'dragover drop');\n            this._off(this.options.pasteZone, 'paste');\n            this._off(this.options.fileInput, 'change');\n        },\n\n        _setOption: function (key, value) {\n            var reinit = $.inArray(key, this._specialOptions) !== -1;\n            if (reinit) {\n                this._destroyEventHandlers();\n            }\n            this._super(key, value);\n            if (reinit) {\n                this._initSpecialOptions();\n                this._initEventHandlers();\n            }\n        },\n\n        _initSpecialOptions: function () {\n            var options = this.options;\n            if (options.fileInput === undefined) {\n                options.fileInput = this.element.is('input[type=\"file\"]') ?\n                        this.element : this.element.find('input[type=\"file\"]');\n            } else if (!(options.fileInput instanceof $)) {\n                options.fileInput = $(options.fileInput);\n            }\n            if (!(options.dropZone instanceof $)) {\n                options.dropZone = $(options.dropZone);\n            }\n            if (!(options.pasteZone instanceof $)) {\n                options.pasteZone = $(options.pasteZone);\n            }\n        },\n\n        _getRegExp: function (str) {\n            var parts = str.split('/'),\n                modifiers = parts.pop();\n            parts.shift();\n            return new RegExp(parts.join('/'), modifiers);\n        },\n\n        _isRegExpOption: function (key, value) {\n            return key !== 'url' && $.type(value) === 'string' &&\n                /^\\/.*\\/[igm]{0,3}$/.test(value);\n        },\n\n        _initDataAttributes: function () {\n            var that = this,\n                options = this.options;\n            // Initialize options set via HTML5 data-attributes:\n            $.each(\n                $(this.element[0].cloneNode(false)).data(),\n                function (key, value) {\n                    if (that._isRegExpOption(key, value)) {\n                        value = that._getRegExp(value);\n                    }\n                    options[key] = value;\n                }\n            );\n        },\n\n        _create: function () {\n            this._initDataAttributes();\n            this._initSpecialOptions();\n            this._slots = [];\n            this._sequence = this._getXHRPromise(true);\n            this._sending = this._active = 0;\n            this._initProgressObject(this);\n            this._initEventHandlers();\n        },\n\n        // This method is exposed to the widget API and allows to query\n        // the number of active uploads:\n        active: function () {\n            return this._active;\n        },\n\n        // This method is exposed to the widget API and allows to query\n        // the widget upload progress.\n        // It returns an object with loaded, total and bitrate properties\n        // for the running uploads:\n        progress: function () {\n            return this._progress;\n        },\n\n        // This method is exposed to the widget API and allows adding files\n        // using the fileupload API. The data parameter accepts an object which\n        // must have a files property and can contain additional options:\n        // .fileupload('add', {files: filesList});\n        add: function (data) {\n            var that = this;\n            if (!data || this.options.disabled) {\n                return;\n            }\n            if (data.fileInput && !data.files) {\n                this._getFileInputFiles(data.fileInput).always(function (files) {\n                    data.files = files;\n                    that._onAdd(null, data);\n                });\n            } else {\n                data.files = $.makeArray(data.files);\n                this._onAdd(null, data);\n            }\n        },\n\n        // This method is exposed to the widget API and allows sending files\n        // using the fileupload API. The data parameter accepts an object which\n        // must have a files or fileInput property and can contain additional options:\n        // .fileupload('send', {files: filesList});\n        // The method returns a Promise object for the file upload call.\n        send: function (data) {\n            if (data && !this.options.disabled) {\n                if (data.fileInput && !data.files) {\n                    var that = this,\n                        dfd = $.Deferred(),\n                        promise = dfd.promise(),\n                        jqXHR,\n                        aborted;\n                    promise.abort = function () {\n                        aborted = true;\n                        if (jqXHR) {\n                            return jqXHR.abort();\n                        }\n                        dfd.reject(null, 'abort', 'abort');\n                        return promise;\n                    };\n                    this._getFileInputFiles(data.fileInput).always(\n                        function (files) {\n                            if (aborted) {\n                                return;\n                            }\n                            if (!files.length) {\n                                dfd.reject();\n                                return;\n                            }\n                            data.files = files;\n                            jqXHR = that._onSend(null, data).then(\n                                function (result, textStatus, jqXHR) {\n                                    dfd.resolve(result, textStatus, jqXHR);\n                                },\n                                function (jqXHR, textStatus, errorThrown) {\n                                    dfd.reject(jqXHR, textStatus, errorThrown);\n                                }\n                            );\n                        }\n                    );\n                    return this._enhancePromise(promise);\n                }\n                data.files = $.makeArray(data.files);\n                if (data.files.length) {\n                    return this._onSend(null, data);\n                }\n            }\n            return this._getXHRPromise(false, data && data.context);\n        }\n\n    });\n\n}));\n\n\n\n// WEBPACK FOOTER //\n// ./common/static/js/vendor/jQuery-File-Upload/js/jquery.fileupload.js","(function() { module.exports = window[\"jQuery\"]; }());\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"jQuery\"\n// module id = 0\n// module chunks = 4 5 6 9 10 12 13 14 16 17 18 19 20 21 22 23 24 25 26 29","(function() { module.exports = window[\"Backbone\"]; }());\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"Backbone\"\n// module id = 1\n// module chunks = 4 5 6 9 10 14 16 17","(function() { module.exports = window[\"_\"]; }());\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"_\"\n// module id = 2\n// module chunks = 4 5 6 9 10 14 16","(function() { module.exports = window[\"gettext\"]; }());\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"gettext\"\n// module id = 3\n// module chunks = 4 6 14"],"sourceRoot":""}